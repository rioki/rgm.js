var rgm={version:"0.1.0"};rgm.vec2=function(){switch(arguments.length){case 0:return new Float32Array(2);case 1:if("number"==typeof arguments[0])return new Float32Array([arguments[0],arguments[0]]);switch(arguments[0].length){case 2:return new Float32Array(arguments[0]);case 3:case 4:return new Float32Array([arguments[0][0],arguments[0][1]]);default:throw new Error("vec2: invalid array size")}case 2:return new Float32Array([arguments[0],arguments[1]]);default:throw new Error("vec2: invalid number of arguments")}},rgm.vec3=function(){switch(arguments.length){case 0:return new Float32Array(3);case 1:if("number"==typeof arguments[0])return new Float32Array([arguments[0],arguments[0],arguments[0]]);switch(arguments[0].length){case 2:return new Float32Array([arguments[0][0],arguments[0][1],0]);case 3:return new Float32Array(arguments[0]);case 4:return new Float32Array([arguments[0][0],arguments[0][1],arguments[0][2]]);default:throw new Error("vec3: invalid array size")}case 3:return new Float32Array([arguments[0],arguments[1],arguments[2]]);default:throw new Error("vec3: invalid number of arguments")}},rgm.vec4=function(){switch(arguments.length){case 0:return new Float32Array(4);case 1:if("number"==typeof arguments[0])return new Float32Array([arguments[0],arguments[0],arguments[0],arguments[0]]);switch(arguments[0].length){case 2:return new Float32Array([arguments[0][0],arguments[0][1],0,0]);case 3:return new Float32Array([arguments[0][0],arguments[0][1],arguments[0][2],0]);case 4:return new Float32Array(arguments[0]);default:throw new Error("vec3: invalid array size")}case 4:return new Float32Array([arguments[0],arguments[1],arguments[2],arguments[3]]);default:throw new Error("vec4: invalid number of arguments")}},rgm.mat3=function(){switch(arguments.length){case 0:return new Float32Array([1,0,0,0,1,0,0,0,1]);case 1:if("number"==typeof arguments[0])return new Float32Array([arguments[0],0,0,0,arguments[0],0,0,0,arguments[0]]);switch(arguments[0].length){case 9:return new Float32Array(arguments[0]);case 16:return new Float32Array([arguments[0][0],arguments[0][1],arguments[0][2],arguments[0][4],arguments[0][5],arguments[0][6],arguments[0][8],arguments[0][9],arguments[0][10]]);default:throw new Error("mat3: invalid array size")}case 9:return new Float32Array([arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8]]);default:throw new Error("vec2: invalid number of arguments")}},rgm.mat4=function(){switch(arguments.length){case 0:return new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);case 1:if("number"==typeof arguments[0])return new Float32Array([arguments[0],0,0,0,0,arguments[0],0,0,0,0,arguments[0],0,0,0,0,arguments[0]]);switch(arguments[0].length){case 9:return new Float32Array([arguments[0][0],arguments[0][1],arguments[0][2],0,arguments[0][3],arguments[0][4],arguments[0][5],0,arguments[0][6],arguments[0][7],arguments[0][8],0,0,0,0,1]);case 16:return new Float32Array(arguments[0]);default:throw new Error("mat3: invalid array size")}case 16:return new Float32Array([arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15]]);default:throw new Error("vec2: invalid number of arguments")}},rgm.quat=function(){switch(arguments.length){case 0:return rgm.vec4(0,0,0,1);case 1:return rgm.vec4(arguments[0]);case 4:return rgm.vec4([arguments[0],arguments[1],arguments[2],arguments[3]]);default:throw new Error("vec2: invalid number of arguments")}},rgm.add=function(r,t){if(r.length!=t.length)throw Error("add: a and b must be the same dimension");for(var e=new Float32Array(r.length),n=0;n<r.length;n++)e[n]=r[n]+t[n];return e},rgm.sub=function(r,t){if(r.length!=t.length)throw Error("sub: a and b must be the same dimension");for(var e=new Float32Array(r.length),n=0;n<r.length;n++)e[n]=r[n]-t[n];return e},rgm.neg=function(r){for(var t=new Float32Array(r.length),e=0;e<r.length;e++)t[e]=-r[e];return t},rgm.dot=function(r,t){for(var e=0,n=0;n<r.length;n++)e+=r[n]*t[n];return e},rgm.cross=function(r,t){if(3!=r.length||3!=t.length)throw Error("cross: a and b must be 3D");var e=new Float32Array(3);return e[0]=r[1]*t[2]-r[2]*t[1],e[1]=r[2]*t[0]-r[0]*t[2],e[2]=r[0]*t[1]-r[1]*t[0],e},rgm.vmult=function(r,t){if(r.length!=t.length)throw Error("vmult: a and b must be the same dimension");for(var e=new Float32Array(r.length),n=0;n<r.length;n++)e[n]=r[n]*t[n];return e},rgm.vsmult=function(r,t){for(var e=new Float32Array(r.length),n=0;n<r.length;n++)e[n]=r[n]*t;return e},rgm.length=function(r){return Math.sqrt(rgm.dot(r,r))},rgm.normalize=function(r){return rgm.vsmult(r,1/rgm.length(r))},rgm.mmult=function(r,t){if(r.length!=t.length)throw Error("mmult: a and b must be the same dimension");for(var e=Math.sqrt(r.length),n=new Float32Array(r.length),a=0;a<e;a++)for(var o=0;o<e;o++){for(var u=0,m=0;m<e;m++)u+=r[a*e+m]*t[m*e+o];n[a*e+o]=u}return n},rgm.transpose=function(r){for(var t=Math.sqrt(r.length),e=new Float32Array(r.length),n=0;n<t;n++)for(var a=0;a<t;a++)e[a*t+n]=r[n*t+a];return e},rgm.mvmult=function(r,t){for(var e=t.length,n=new Float32Array(e),a=0;a<e;a++){n[a]=0;for(var o=0;o<e;o++)n[a]+=r[o*e+a]*t[o]}return n},rgm.qmult=function(r,t){var e=r[3],n=rgm.vec3(r[0],r[1],r[2]),a=t[3],o=rgm.vec3(t[0],t[1],t[2]),u=e*a-rgm.dot(n,o),m=rgm.add(rgm.add(rgm.vsmult(o,e),rgm.vsmult(n,a)),rgm.cross(n,o));return rgm.quat(m[0],m[1],n[2],u)},rgm.qconjugate=function(r){return rgm.quat(-r[0],-r[1],-r[2],r[3])},rgm.quat2mat4=function(r){var t=r[0]*r[0],e=r[0]*r[1],n=r[0]*r[2],a=r[0]*r[3],o=r[1]*r[1],u=r[1]*r[2],m=r[1]*r[3],g=r[2]*r[2],l=r[2]*r[3],i=rgm.mat4(1);return i[0]=1-2*(o+g),i[4]=2*(e-l),i[8]=2*(n+m),i[1]=2*(e+l),i[5]=1-2*(t+g),i[9]=2*(u-a),i[2]=2*(n-m),i[6]=2*(u+a),i[10]=1-2*(t+o),i[3]=i[7]=i[11]=i[12]=i[13]=i[14]=0,i[15]=1,i},rgm.equal=function(r,t,e){if(r.length!=t.length)return!1;for(var n=void 0!==e?e:1e-6,a=0;a<r.length;a++)if(Math.abs(r[a]-t[a])>n)return!1;return!0},rgm.radians=function(r){return r*(Math.PI/180)},rgm.degrees=function(r){return r*(180/Math.PI)},rgm.ortho=function(r,t,e,n,a,o){var u=t-r,m=n-e,g=o-a,l=rgm.mat4();return l[0]=2/u,l[1]=0,l[2]=0,l[3]=0,l[4]=0,l[5]=2/m,l[6]=0,l[7]=0,l[8]=0,l[9]=0,l[10]=-2/g,l[11]=0,l[12]=-(r+t)/u,l[13]=-(n+e)/m,l[14]=-(o+a)/g,l[15]=1,l},rgm.frustum=function(r,t,e,n,a,o){var u=2*a,m=t-r,g=n-e,l=o-a,i=new Float32Array(16);return i[0]=u/m,i[4]=0,i[8]=(t+r)/m,i[12]=0,i[1]=0,i[5]=u/g,i[9]=(n+e)/g,i[13]=0,i[2]=0,i[6]=0,i[10]=(-o-a)/l,i[14]=-u*o/l,i[3]=0,i[7]=0,i[11]=-1,i[15]=0,i},rgm.perspective=function(r,t,e,n){var a=e*Math.tan(rgm.radians(r)),o=a*t;return rgm.frustum(-o,o,-a,a,e,n)},rgm.translate=function(r,t,e,n){var a=rgm.mat4(r);return a[12]=r[0]*t+r[4]*e+r[8]*n+r[12],a[13]=r[1]*t+r[5]*e+r[9]*n+r[13],a[14]=r[2]*t+r[6]*e+r[10]*n+r[14],a[15]=r[3]*t+r[7]*e+r[11]*n+r[15],a},rgm.rotate=function(r,t,e,n,a){var o=rgm.radians(t),u=Math.cos(o),m=Math.sin(o),g=Math.sqrt(e*e+n*n+a*a),l=e/g,i=n/g,s=a/g,c=l*(1-u),h=i*(1-u),f=s*(1-u),w=rgm.mat4(1);w[0]=u+c*l,w[1]=0+c*i+m*s,w[2]=0+c*s-m*i,w[4]=0+h*l-m*s,w[5]=u+h*i,w[6]=0+h*s+m*l,w[8]=0+f*l+m*i,w[9]=0+f*i-m*l,w[10]=u+f*s;var v=rgm.mmult(r,w);return v[12]=r[12],v[13]=r[13],v[14]=r[14],v[15]=r[15],v},rgm.scale=function(r,t,e,n){var a=rgm.mat4(1);return a[0]=r[0]*t,a[1]=r[1]*t,a[2]=r[2]*t,a[3]=r[3]*t,a[4]=r[4]*e,a[5]=r[5]*e,a[6]=r[6]*e,a[7]=r[7]*e,a[8]=r[8]*n,a[9]=r[9]*n,a[10]=r[10]*n,a[11]=r[11]*n,a[12]=r[12],a[13]=r[13],a[14]=r[14],a[15]=r[15],a},rgm.qrotate=function(r,t){var e=rgm.normalize(t),n=Math.sin(rgm.radians(r/2)),a=Math.cos(rgm.radians(r/2)),o=e[0]*n,u=e[1]*n,m=e[2]*n,g=a;return rgm.quat(o,u,m,g)},rgm.qtransform=function(r,t){var e=rgm.normalize(r),n=rgm.quat(t[0],t[1],t[2],0),a=rgm.qconjugate(e),o=rgm.qmult(rgm.qmult(e,n),a);return rgm.vec3(o[0],o[1],o[2])};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9pbml0Xy5qcyIsImNvbnN0cnVjdG9ycy5qcyIsImZ1bmN0aW9ucy5qcyIsInRyYW5zZm9ybXMuanMiXSwibmFtZXMiOlsicmdtIiwidmVyc2lvbiIsInZlYzIiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJGbG9hdDMyQXJyYXkiLCJFcnJvciIsInZlYzMiLCJ2ZWM0IiwibWF0MyIsIm1hdDQiLCJxdWF0IiwiYWRkIiwiYSIsImIiLCJyIiwiaSIsInN1YiIsIm5lZyIsImRvdCIsInYiLCJjcm9zcyIsInZtdWx0IiwidnNtdWx0IiwicyIsIk1hdGgiLCJzcXJ0Iiwibm9ybWFsaXplIiwibW11bHQiLCJuIiwiaiIsImsiLCJ0cmFuc3Bvc2UiLCJtIiwibXZtdWx0IiwicW11bHQiLCJ3YSIsInZhIiwid2IiLCJ2YiIsInciLCJxY29uanVnYXRlIiwicSIsInF1YXQybWF0NCIsInh4IiwieHkiLCJ4eiIsInh3IiwieXkiLCJ5eiIsInl3IiwienoiLCJ6dyIsIm1hdCIsImVxdWFsIiwiZXBzIiwiZSIsInVuZGVmaW5lZCIsImFicyIsInJhZGlhbnMiLCJkZWdyZWVzIiwiUEkiLCJvcnRobyIsImxlZnQiLCJyaWdodCIsImJvdHRvbSIsInRvcCIsIm5lYXIiLCJmYXIiLCJybCIsInRiIiwiZm4iLCJmcnVzdHVtIiwiem5lYXIiLCJ6ZmFyIiwidDEiLCJ0MiIsInQzIiwidDQiLCJwZXJzcGVjdGl2ZSIsImZvdnkiLCJhc3BlY3QiLCJ5bWF4IiwidGFuIiwieG1heCIsInRyYW5zbGF0ZSIsIngiLCJ5IiwieiIsInJvdGF0ZSIsImFuZ2xlIiwiYyIsImNvcyIsInNpbiIsImwiLCJueCIsIm55IiwibnoiLCJ0MCIsImQiLCJzY2FsZSIsInFyb3RhdGUiLCJheGlzIiwiYW4iLCJzaW5fYSIsImNvc19hIiwicXRyYW5zZm9ybSIsInFuIiwicXYiLCJxYyIsInFyIl0sIm1hcHBpbmdzIjoiQUFDQSxHQUFBQSxNQUFBQyxRQUFBLFFDQUFELEtBQUFFLEtBQUEsV0FDQSxPQUFBQyxVQUFBQyxRQUVBLElBQUEsR0FDQSxNQUFBLElBQUFDLGNBQUEsRUFDQSxLQUFBLEdBQ0EsR0FBQSxnQkFBQUYsV0FBQSxHQUNBLE1BQUEsSUFBQUUsZUFBQUYsVUFBQSxHQUFBQSxVQUFBLElBR0EsUUFBQUEsVUFBQSxHQUFBQyxRQUNBLElBQUEsR0FDQSxNQUFBLElBQUFDLGNBQUFGLFVBQUEsR0FDQSxLQUFBLEdBQ0EsSUFBQSxHQUNBLE1BQUEsSUFBQUUsZUFBQUYsVUFBQSxHQUFBLEdBQUFBLFVBQUEsR0FBQSxJQUNBLFNBQ0EsS0FBQSxJQUFBRyxPQUFBLDRCQUdBLElBQUEsR0FDQSxNQUFBLElBQUFELGVBQUFGLFVBQUEsR0FBQUEsVUFBQSxJQUNBLFNBQ0EsS0FBQSxJQUFBRyxPQUFBLHVDQUlBTixJQUFBTyxLQUFBLFdBQ0EsT0FBQUosVUFBQUMsUUFFQSxJQUFBLEdBQ0EsTUFBQSxJQUFBQyxjQUFBLEVBQ0EsS0FBQSxHQUNBLEdBQUEsZ0JBQUFGLFdBQUEsR0FDQSxNQUFBLElBQUFFLGVBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFBQSxVQUFBLElBR0EsUUFBQUEsVUFBQSxHQUFBQyxRQUNBLElBQUEsR0FDQSxNQUFBLElBQUFDLGVBQUFGLFVBQUEsR0FBQSxHQUFBQSxVQUFBLEdBQUEsR0FBQSxHQUNBLEtBQUEsR0FDQSxNQUFBLElBQUFFLGNBQUFGLFVBQUEsR0FDQSxLQUFBLEdBQ0EsTUFBQSxJQUFBRSxlQUFBRixVQUFBLEdBQUEsR0FBQUEsVUFBQSxHQUFBLEdBQUFBLFVBQUEsR0FBQSxJQUNBLFNBQ0EsS0FBQSxJQUFBRyxPQUFBLDRCQUdBLElBQUEsR0FDQSxNQUFBLElBQUFELGVBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFBQSxVQUFBLElBQ0EsU0FDQSxLQUFBLElBQUFHLE9BQUEsdUNBSUFOLElBQUFRLEtBQUEsV0FDQSxPQUFBTCxVQUFBQyxRQUVBLElBQUEsR0FDQSxNQUFBLElBQUFDLGNBQUEsRUFDQSxLQUFBLEdBQ0EsR0FBQSxnQkFBQUYsV0FBQSxHQUNBLE1BQUEsSUFBQUUsZUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQUFBLFVBQUEsR0FBQUEsVUFBQSxJQUdBLFFBQUFBLFVBQUEsR0FBQUMsUUFDQSxJQUFBLEdBQ0EsTUFBQSxJQUFBQyxlQUFBRixVQUFBLEdBQUEsR0FBQUEsVUFBQSxHQUFBLEdBQUEsRUFBQSxHQUNBLEtBQUEsR0FDQSxNQUFBLElBQUFFLGVBQUFGLFVBQUEsR0FBQSxHQUFBQSxVQUFBLEdBQUEsR0FBQUEsVUFBQSxHQUFBLEdBQUEsR0FDQSxLQUFBLEdBQ0EsTUFBQSxJQUFBRSxjQUFBRixVQUFBLEdBQ0EsU0FDQSxLQUFBLElBQUFHLE9BQUEsNEJBR0EsSUFBQSxHQUNBLE1BQUEsSUFBQUQsZUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQUFBLFVBQUEsR0FBQUEsVUFBQSxJQUNBLFNBQ0EsS0FBQSxJQUFBRyxPQUFBLHVDQUlBTixJQUFBUyxLQUFBLFdBQ0EsT0FBQU4sVUFBQUMsUUFFQSxJQUFBLEdBQ0EsTUFBQSxJQUFBQyxlQUFBLEVBQUEsRUFBQSxFQUNBLEVBQUEsRUFBQSxFQUNBLEVBQUEsRUFBQSxHQUNBLEtBQUEsR0FDQSxHQUFBLGdCQUFBRixXQUFBLEdBQ0EsTUFBQSxJQUFBRSxlQUFBRixVQUFBLEdBQUEsRUFBQSxFQUNBLEVBQUFBLFVBQUEsR0FBQSxFQUNBLEVBQUEsRUFBQUEsVUFBQSxJQUdBLFFBQUFBLFVBQUEsR0FBQUMsUUFDQSxJQUFBLEdBQ0EsTUFBQSxJQUFBQyxjQUFBRixVQUFBLEdBQ0EsS0FBQSxJQUNBLE1BQUEsSUFBQUUsZUFBQUYsVUFBQSxHQUFBLEdBQUFBLFVBQUEsR0FBQSxHQUFBQSxVQUFBLEdBQUEsR0FDQUEsVUFBQSxHQUFBLEdBQUFBLFVBQUEsR0FBQSxHQUFBQSxVQUFBLEdBQUEsR0FDQUEsVUFBQSxHQUFBLEdBQUFBLFVBQUEsR0FBQSxHQUFBQSxVQUFBLEdBQUEsS0FDQSxTQUNBLEtBQUEsSUFBQUcsT0FBQSw0QkFHQSxJQUFBLEdBQ0EsTUFBQSxJQUFBRCxlQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBQUEsVUFBQSxHQUNBQSxVQUFBLEdBQUFBLFVBQUEsR0FBQUEsVUFBQSxHQUNBQSxVQUFBLEdBQUFBLFVBQUEsR0FBQUEsVUFBQSxJQUNBLFNBQ0EsS0FBQSxJQUFBRyxPQUFBLHVDQUlBTixJQUFBVSxLQUFBLFdBQ0EsT0FBQVAsVUFBQUMsUUFFQSxJQUFBLEdBQ0EsTUFBQSxJQUFBQyxlQUFBLEVBQUEsRUFBQSxFQUFBLEVBQ0EsRUFBQSxFQUFBLEVBQUEsRUFDQSxFQUFBLEVBQUEsRUFBQSxFQUNBLEVBQUEsRUFBQSxFQUFBLEdBQ0EsS0FBQSxHQUNBLEdBQUEsZ0JBQUFGLFdBQUEsR0FDQSxNQUFBLElBQUFFLGVBQUFGLFVBQUEsR0FBQSxFQUFBLEVBQUEsRUFDQSxFQUFBQSxVQUFBLEdBQUEsRUFBQSxFQUNBLEVBQUEsRUFBQUEsVUFBQSxHQUFBLEVBQ0EsRUFBQSxFQUFBLEVBQUFBLFVBQUEsSUFHQSxRQUFBQSxVQUFBLEdBQUFDLFFBQ0EsSUFBQSxHQUNBLE1BQUEsSUFBQUMsZUFBQUYsVUFBQSxHQUFBLEdBQUFBLFVBQUEsR0FBQSxHQUFBQSxVQUFBLEdBQUEsR0FBQSxFQUNBQSxVQUFBLEdBQUEsR0FBQUEsVUFBQSxHQUFBLEdBQUFBLFVBQUEsR0FBQSxHQUFBLEVBQ0FBLFVBQUEsR0FBQSxHQUFBQSxVQUFBLEdBQUEsR0FBQUEsVUFBQSxHQUFBLEdBQUEsRUFDQSxFQUFBLEVBQUEsRUFBQSxHQUNBLEtBQUEsSUFDQSxNQUFBLElBQUFFLGNBQUFGLFVBQUEsR0FDQSxTQUNBLEtBQUEsSUFBQUcsT0FBQSw0QkFHQSxJQUFBLElBQ0EsTUFBQSxJQUFBRCxlQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBQUEsVUFBQSxHQUFBQSxVQUFBLEdBQ0FBLFVBQUEsR0FBQUEsVUFBQSxHQUFBQSxVQUFBLEdBQUFBLFVBQUEsR0FDQUEsVUFBQSxHQUFBQSxVQUFBLEdBQUFBLFVBQUEsSUFBQUEsVUFBQSxJQUNBQSxVQUFBLElBQUFBLFVBQUEsSUFBQUEsVUFBQSxJQUFBQSxVQUFBLEtBQ0EsU0FDQSxL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LElBR0F4QyxJQUFBMEcsV0FBQSxTQUFBaEUsRUFBQXRCLEdBQ0EsR0FBQXVGLEdBQUEzRyxJQUFBMkIsVUFBQWUsR0FDQWtFLEVBQUE1RyxJQUFBVyxLQUFBUyxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBLEdBQ0F5RixFQUFBN0csSUFBQXlDLFdBQUFrRSxHQUVBRyxFQUFBOUcsSUFBQW1DLE1BQUFuQyxJQUFBbUMsTUFBQXdFLEVBQUFDLEdBQUFDLEVBRUEsT0FBQTdHLEtBQUFPLEtBQUF1RyxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSIsImZpbGUiOiJyZ20tMC4xLjAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgcmdtID0ge3ZlcnNpb246IFwiMC4xLjBcIn07XG4iLCJcbnJnbS52ZWMyID0gZnVuY3Rpb24gKCkge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpXG4gIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSgyKTtcbiAgICBjYXNlIDE6XG4gICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMF1dKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50c1swXS5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShhcmd1bWVudHNbMF0pOyAgICAgICAgXG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFthcmd1bWVudHNbMF1bMF0sIGFyZ3VtZW50c1swXVsxXV0pOyAgICAgICAgXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndmVjMjogaW52YWxpZCBhcnJheSBzaXplJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV1dKTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd2ZWMyOiBpbnZhbGlkIG51bWJlciBvZiBhcmd1bWVudHMnKTtcbiAgfVxufVxuXG5yZ20udmVjMyA9IGZ1bmN0aW9uICgpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKVxuICB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgY2FzZSAxOlxuICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoW2FyZ3VtZW50c1swXSwgYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMF1dKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgeyAgICAgICAgXG4gICAgICAgIHN3aXRjaCAoYXJndW1lbnRzWzBdLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFthcmd1bWVudHNbMF1bMF0sIGFyZ3VtZW50c1swXVsxXSwgMC4wXSk7ICAgICAgICBcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShhcmd1bWVudHNbMF0pOyAgICAgICAgXG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoW2FyZ3VtZW50c1swXVswXSwgYXJndW1lbnRzWzBdWzFdLCBhcmd1bWVudHNbMF1bMl1dKTsgICAgICAgIFxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ZlYzM6IGludmFsaWQgYXJyYXkgc2l6ZScpO1xuICAgICAgICB9ICAgICAgIFxuICAgICAgfSAgICAgIFxuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFthcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdXSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcigndmVjMzogaW52YWxpZCBudW1iZXIgb2YgYXJndW1lbnRzJyk7XG4gIH1cbn1cblxucmdtLnZlYzQgPSBmdW5jdGlvbiAoKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aClcbiAge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDQpO1xuICAgIGNhc2UgMTpcbiAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFthcmd1bWVudHNbMF0sIGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMF1dKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgeyAgICAgICAgXG4gICAgICAgIHN3aXRjaCAoYXJndW1lbnRzWzBdLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFthcmd1bWVudHNbMF1bMF0sIGFyZ3VtZW50c1swXVsxXSwgMC4wLCAwLjBdKTsgICAgICAgIFxuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFthcmd1bWVudHNbMF1bMF0sIGFyZ3VtZW50c1swXVsxXSwgYXJndW1lbnRzWzBdWzJdLCAwLjBdKTsgICAgICAgIFxuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KGFyZ3VtZW50c1swXSk7ICAgICAgICBcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd2ZWMzOiBpbnZhbGlkIGFycmF5IHNpemUnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFthcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdLCBhcmd1bWVudHNbM11dKTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd2ZWM0OiBpbnZhbGlkIG51bWJlciBvZiBhcmd1bWVudHMnKTtcbiAgfVxufVxuXG5yZ20ubWF0MyA9IGZ1bmN0aW9uICgpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKVxuICB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoWzEuMCwgMC4wLCAwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wLCAxLjAsIDAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAsIDAuMCwgMS4wXSk7XG4gICAgY2FzZSAxOlxuICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoW2FyZ3VtZW50c1swXSwgICAgICAgICAgMC4wLCAgICAgICAgICAwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAsIGFyZ3VtZW50c1swXSwgICAgICAgICAgMC4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wLCAgICAgICAgICAwLjAsIGFyZ3VtZW50c1swXV0pO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN3aXRjaCAoYXJndW1lbnRzWzBdLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KGFyZ3VtZW50c1swXSk7ICAgICAgICBcbiAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoW2FyZ3VtZW50c1swXVswXSwgYXJndW1lbnRzWzBdWzFdLCBhcmd1bWVudHNbMF1bIDJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c1swXVs0XSwgYXJndW1lbnRzWzBdWzVdLCBhcmd1bWVudHNbMF1bIDZdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c1swXVs4XSwgYXJndW1lbnRzWzBdWzldLCBhcmd1bWVudHNbMF1bMTBdXSk7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbWF0MzogaW52YWxpZCBhcnJheSBzaXplJyk7XG4gICAgICAgIH0gICAgICAgIFxuICAgICAgfVxuICAgIGNhc2UgOTpcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFthcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNbM10sIGFyZ3VtZW50c1s0XSwgYXJndW1lbnRzWzVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c1s2XSwgYXJndW1lbnRzWzddLCBhcmd1bWVudHNbOF1dKTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd2ZWMyOiBpbnZhbGlkIG51bWJlciBvZiBhcmd1bWVudHMnKTtcbiAgfVxufVxuXG5yZ20ubWF0NCA9IGZ1bmN0aW9uICgpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKVxuICB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoWzEuMCwgMC4wLCAwLjAsIDAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAsIDEuMCwgMC4wLCAwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wLCAwLjAsIDEuMCwgMC4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMCwgMC4wLCAwLjAsIDEuMF0pO1xuICAgIGNhc2UgMTpcbiAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFthcmd1bWVudHNbMF0sICAgICAgICAgIDAuMCwgICAgICAgICAgMC4wLCAgICAgICAgICAwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAsIGFyZ3VtZW50c1swXSwgICAgICAgICAgMC4wLCAgICAgICAgICAwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgIDAuMCwgYXJndW1lbnRzWzBdLCAgICAgICAgICAwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgIDAuMCwgICAgICAgICAgMC4wLCBhcmd1bWVudHNbMF1dKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50c1swXS5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbYXJndW1lbnRzWzBdWzBdLCBhcmd1bWVudHNbMF1bMV0sIGFyZ3VtZW50c1swXVsyXSwgMC4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c1swXVszXSwgYXJndW1lbnRzWzBdWzRdLCBhcmd1bWVudHNbMF1bNV0sIDAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNbMF1bNl0sIGFyZ3VtZW50c1swXVs3XSwgYXJndW1lbnRzWzBdWzhdLCAwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wLCAgICAgICAgICAgICAwLjAsICAgICAgICAgICAgIDAuMCwgMS4wXSk7XG4gICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KGFyZ3VtZW50c1swXSk7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbWF0MzogaW52YWxpZCBhcnJheSBzaXplJyk7XG4gICAgICAgIH0gICAgICAgIFxuICAgICAgfVxuICAgIGNhc2UgMTY6XG4gICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbYXJndW1lbnRzWyAwXSwgYXJndW1lbnRzWyAxXSwgYXJndW1lbnRzWyAyXSwgYXJndW1lbnRzWyAzXSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzWyA0XSwgYXJndW1lbnRzWyA1XSwgYXJndW1lbnRzWyA2XSwgYXJndW1lbnRzWyA3XSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzWyA4XSwgYXJndW1lbnRzWyA5XSwgYXJndW1lbnRzWzEwXSwgYXJndW1lbnRzWzExXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNbMTJdLCBhcmd1bWVudHNbMTNdLCBhcmd1bWVudHNbMTRdLCBhcmd1bWVudHNbMTVdXSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcigndmVjMjogaW52YWxpZCBudW1iZXIgb2YgYXJndW1lbnRzJyk7XG4gIH1cbn1cblxucmdtLnF1YXQgPSBmdW5jdGlvbiAoKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aClcbiAge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiByZ20udmVjNCgwLCAwLCAwLCAxKTtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gcmdtLnZlYzQoYXJndW1lbnRzWzBdKTsgICAgIFxuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiByZ20udmVjNChbYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSwgYXJndW1lbnRzWzNdXSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcigndmVjMjogaW52YWxpZCBudW1iZXIgb2YgYXJndW1lbnRzJyk7XG4gIH1cbn1cbiIsIlxucmdtLmFkZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIGlmIChhLmxlbmd0aCAhPSBiLmxlbmd0aCkge1xuICAgIHRocm93IEVycm9yKCdhZGQ6IGEgYW5kIGIgbXVzdCBiZSB0aGUgc2FtZSBkaW1lbnNpb24nKTtcbiAgfVxuICBcbiAgdmFyIHIgPSBuZXcgRmxvYXQzMkFycmF5KGEubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgcltpXSA9IGFbaV0gKyBiW2ldO1xuICB9XG4gIFxuICByZXR1cm4gcjtcbn1cblxucmdtLnN1YiA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIGlmIChhLmxlbmd0aCAhPSBiLmxlbmd0aCkge1xuICAgIHRocm93IEVycm9yKCdzdWI6IGEgYW5kIGIgbXVzdCBiZSB0aGUgc2FtZSBkaW1lbnNpb24nKTtcbiAgfVxuICBcbiAgdmFyIHIgPSBuZXcgRmxvYXQzMkFycmF5KGEubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgcltpXSA9IGFbaV0gLSBiW2ldO1xuICB9XG4gIFxuICByZXR1cm4gcjtcbn1cblxucmdtLm5lZyA9IGZ1bmN0aW9uIChhKSB7XG4gIHZhciByID0gbmV3IEZsb2F0MzJBcnJheShhLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgIHJbaV0gPSAtYVtpXTtcbiAgfVxuICBcbiAgcmV0dXJuIHI7XG59XG5cbnJnbS5kb3QgPSBmdW5jdGlvbiAoYSwgYikge1xuICB2YXIgdiA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgIHYgKz0gYVtpXSAqIGJbaV07XG4gIH1cbiAgcmV0dXJuIHY7XG59XG5cbnJnbS5jcm9zcyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIGlmIChhLmxlbmd0aCAhPSAzIHx8XG4gICAgICBiLmxlbmd0aCAhPSAzKSB7XG4gICAgdGhyb3cgRXJyb3IoJ2Nyb3NzOiBhIGFuZCBiIG11c3QgYmUgM0QnKTtcbiAgfVxuICBcbiAgdmFyIHIgPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuICBcbiAgclswXSA9IChhWzFdICogYlsyXSkgLSAoYVsyXSAqIGJbMV0pO1xuICByWzFdID0gKGFbMl0gKiBiWzBdKSAtIChhWzBdICogYlsyXSk7XG4gIHJbMl0gPSAoYVswXSAqIGJbMV0pIC0gKGFbMV0gKiBiWzBdKTtcbiAgXG4gIHJldHVybiByO1xufVxuXG5yZ20udm11bHQgPSBmdW5jdGlvbiAoYSwgYikge1xuICBpZiAoYS5sZW5ndGggIT0gYi5sZW5ndGgpIHtcbiAgICB0aHJvdyBFcnJvcigndm11bHQ6IGEgYW5kIGIgbXVzdCBiZSB0aGUgc2FtZSBkaW1lbnNpb24nKTtcbiAgfVxuICBcbiAgdmFyIHIgPSBuZXcgRmxvYXQzMkFycmF5KGEubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgcltpXSA9IGFbaV0gKiBiW2ldO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5yZ20udnNtdWx0ID0gZnVuY3Rpb24gKHYsIHMpIHtcbiAgdmFyIHIgPSBuZXcgRmxvYXQzMkFycmF5KHYubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2Lmxlbmd0aDsgaSsrKSB7XG4gICAgcltpXSA9IHZbaV0gKiBzO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5yZ20ubGVuZ3RoID0gZnVuY3Rpb24gKHYpIHsgIFxuICByZXR1cm4gTWF0aC5zcXJ0KHJnbS5kb3QodiwgdikpO1xufVxuXG5yZ20ubm9ybWFsaXplID0gZnVuY3Rpb24gKHYpIHtcbiAgcmV0dXJuIHJnbS52c211bHQodiwgMS4wIC8gcmdtLmxlbmd0aCh2KSk7XG59XG5cbnJnbS5tbXVsdCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIGlmIChhLmxlbmd0aCAhPSBiLmxlbmd0aCkge1xuICAgIHRocm93IEVycm9yKCdtbXVsdDogYSBhbmQgYiBtdXN0IGJlIHRoZSBzYW1lIGRpbWVuc2lvbicpO1xuICB9XG4gIFxuICB2YXIgbiA9IE1hdGguc3FydChhLmxlbmd0aCk7XG4gIHZhciByID0gbmV3IEZsb2F0MzJBcnJheShhLmxlbmd0aCk7XG4gIFxuICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbjsgaisrKSB7XG4gICAgICB2YXIgdiA9IDA7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IG47IGsrKykge1xuICAgICAgICB2ID0gdiArIGFbaSpuK2tdICogYltrKm4ral07XG4gICAgICB9XG4gICAgICByW2kqbitqXSA9IHY7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gcjtcbn1cblxucmdtLnRyYW5zcG9zZSA9IGZ1bmN0aW9uKG0pIHsgICAgXG4gIHZhciBuID0gTWF0aC5zcXJ0KG0ubGVuZ3RoKTtcbiAgdmFyIHIgPSBuZXcgRmxvYXQzMkFycmF5KG0ubGVuZ3RoKTtcbiAgXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBuOyBqKyspIHtcbiAgICAgIHJbaipuK2ldID0gbVtpKm4ral07XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gcjtcbn1cblxucmdtLm12bXVsdCA9IGZ1bmN0aW9uIChtLCB2KSB7XG5cdHZhciBuID0gdi5sZW5ndGg7XG5cdHZhciByID0gbmV3IEZsb2F0MzJBcnJheShuKTtcblx0XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKVxuXHR7XG5cdFx0cltpXSA9IDA7XG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBuOyBqKyspXG5cdFx0e1xuXHRcdFx0XHRyW2ldICs9IG1baipuK2ldICogdltqXTtcblx0XHR9XG5cdH1cblx0XG5cdHJldHVybiByO1xufVxuXG5yZ20ucW11bHQgPSBmdW5jdGlvbiAoYSwgYikge1xuICB2YXIgd2EgPSBhWzNdO1xuICB2YXIgdmEgPSByZ20udmVjMyhhWzBdLCBhWzFdLCBhWzJdKTtcbiAgdmFyIHdiID0gYlszXTtcbiAgdmFyIHZiID0gcmdtLnZlYzMoYlswXSwgYlsxXSwgYlsyXSk7XG4gIFxuICB2YXIgdyA9IHdhICogd2IgLSByZ20uZG90KHZhLCB2Yik7XG4gIHZhciB2ID0gcmdtLmFkZChyZ20uYWRkKHJnbS52c211bHQodmIsIHdhKSwgcmdtLnZzbXVsdCh2YSwgd2IpKSwgcmdtLmNyb3NzKHZhLCB2YikpO1xuXG4gIHJldHVybiByZ20ucXVhdCh2WzBdLCB2WzFdLCB2YVsyXSwgdyk7XG59XG5cbnJnbS5xY29uanVnYXRlID0gZnVuY3Rpb24gKHEpIHtcbiAgcmV0dXJuIHJnbS5xdWF0KC1xWzBdLCAtcVsxXSwgLXFbMl0sIHFbM10pO1xufVxuXG5yZ20ucXVhdDJtYXQ0ID0gZnVuY3Rpb24gKHEpIHtcbiAgdmFyIHh4ID0gcVswXSAqIHFbMF07XG4gIHZhciB4eSA9IHFbMF0gKiBxWzFdO1xuICB2YXIgeHogPSBxWzBdICogcVsyXTtcbiAgdmFyIHh3ID0gcVswXSAqIHFbM107XG4gIHZhciB5eSA9IHFbMV0gKiBxWzFdO1xuICB2YXIgeXogPSBxWzFdICogcVsyXTtcbiAgdmFyIHl3ID0gcVsxXSAqIHFbM107XG4gIHZhciB6eiA9IHFbMl0gKiBxWzJdO1xuICB2YXIgencgPSBxWzJdICogcVszXTtcbiAgXG4gIHZhciBtYXQgPSByZ20ubWF0NCgxKTtcbiAgbWF0WzBdICA9IDEgLSAyICogKHl5ICsgenopO1xuICBtYXRbNF0gID0gICAgIDIgKiAoeHkgLSB6dyk7XG4gIG1hdFs4XSAgPSAgICAgMiAqICh4eiArIHl3KTtcbiAgbWF0WzFdICA9ICAgICAyICogKHh5ICsgencpO1xuICBtYXRbNV0gID0gMSAtIDIgKiAoeHggKyB6eik7XG4gIG1hdFs5XSAgPSAgICAgMiAqICh5eiAtIHh3KTtcbiAgbWF0WzJdICA9ICAgICAyICogKHh6IC0geXcpO1xuICBtYXRbNl0gID0gICAgIDIgKiAoeXogKyB4dyk7XG4gIG1hdFsxMF0gPSAxIC0gMiAqICh4eCArIHl5KTtcbiAgbWF0WzNdICA9IG1hdFs3XSA9IG1hdFsxMV0gPSBtYXRbMTJdID0gbWF0WzEzXSA9IG1hdFsxNF0gPSAwO1xuICBtYXRbMTVdID0gMTtcbiAgXG4gIHJldHVybiBtYXQ7XG59XG5cbnJnbS5lcXVhbCA9IGZ1bmN0aW9uIChhLCBiLCBlcHMpIHtcbiAgaWYgKGEubGVuZ3RoICE9IGIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIFxuICB2YXIgZSA9IChlcHMgIT09IHVuZGVmaW5lZCkgPyBlcHMgOiAxZS02O1xuICBcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKE1hdGguYWJzKGFbaV0gLSBiW2ldKSA+IGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgXG4gIHJldHVybiB0cnVlO1xufSIsIlxuXG5yZ20ucmFkaWFucyA9IGZ1bmN0aW9uKGRlZ3JlZXMpIHtcbiAgcmV0dXJuIGRlZ3JlZXMgKiAoTWF0aC5QSSAvIDE4MC4wKTtcbn07XG5cbnJnbS5kZWdyZWVzID0gZnVuY3Rpb24ocmFkaWFucykge1xuICByZXR1cm4gcmFkaWFucyAqICgxODAuMCAvIE1hdGguUEkpO1xufTsgXG5cblxucmdtLm9ydGhvID0gZnVuY3Rpb24gKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKSB7XG4gIHZhciBybCA9IChyaWdodCAtIGxlZnQpO1xuICB2YXIgdGIgPSAodG9wIC0gYm90dG9tKTtcbiAgdmFyIGZuID0gKGZhciAtIG5lYXIpO1xuICBcbiAgdmFyIG0gPSByZ20ubWF0NCgpOyAgXG4gIFxuICBtWzBdID0gMiAvIHJsO1xuICBtWzFdID0gMDtcbiAgbVsyXSA9IDA7XG4gIG1bM10gPSAwO1xuICBtWzRdID0gMDtcbiAgbVs1XSA9IDIgLyB0YjtcbiAgbVs2XSA9IDA7XG4gIG1bN10gPSAwO1xuICBtWzhdID0gMDtcbiAgbVs5XSA9IDA7XG4gIG1bMTBdID0gLTIgLyBmbjtcbiAgbVsxMV0gPSAwO1xuICBtWzEyXSA9IC0obGVmdCArIHJpZ2h0KSAvIHJsO1xuICBtWzEzXSA9IC0odG9wICsgYm90dG9tKSAvIHRiO1xuICBtWzE0XSA9IC0oZmFyICsgbmVhcikgLyBmbjtcbiAgbVsxNV0gPSAxO1xuXG4gIHJldHVybiBtO1xufVxuXG5yZ20uZnJ1c3R1bSA9IGZ1bmN0aW9uIChsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIHpuZWFyLCB6ZmFyKSB7XG4gIHZhciB0MSA9IDIgKiB6bmVhcjtcbiAgdmFyIHQyID0gcmlnaHQgLSBsZWZ0O1xuICB2YXIgdDMgPSB0b3AgLSBib3R0b207XG4gIHZhciB0NCA9IHpmYXIgLSB6bmVhcjtcblxuICB2YXIgbSA9IG5ldyBGbG9hdDMyQXJyYXkoMTYpO1xuICBcbiAgbVswXSA9IHQxL3QyOyBtWzRdID0gICAgIDA7IG1bIDhdID0gIChyaWdodCArIGxlZnQpIC8gdDI7IG1bMTJdID0gICAgICAgICAgICAgICAgIDA7XG4gIG1bMV0gPSAgICAgMDsgbVs1XSA9IHQxL3QzOyBtWyA5XSA9ICAodG9wICsgYm90dG9tKSAvIHQzOyBtWzEzXSA9ICAgICAgICAgICAgICAgICAwO1xuICBtWzJdID0gICAgIDA7IG1bNl0gPSAgICAgMDsgbVsxMF0gPSAoLXpmYXIgLSB6bmVhcikgLyB0NDsgbVsxNF0gPSAoLXQxICogemZhcikgLyB0NDtcbiAgbVszXSA9ICAgICAwOyBtWzddID0gICAgIDA7IG1bMTFdID0gICAgICAgICAgICAgICAgICAgLTE7IG1bMTVdID0gICAgICAgICAgICAgICAgIDA7XG4gIFxuICByZXR1cm4gbTtcbn1cblxucmdtLnBlcnNwZWN0aXZlID0gZnVuY3Rpb24gKGZvdnksIGFzcGVjdCwgem5lYXIsIHpmYXIpIHtcbiAgdmFyIHltYXggPSB6bmVhciAqIE1hdGgudGFuKHJnbS5yYWRpYW5zKGZvdnkpKTtcbiAgdmFyIHhtYXggPSB5bWF4ICogYXNwZWN0O1xuICByZXR1cm4gcmdtLmZydXN0dW0oLXhtYXgsIHhtYXgsIC15bWF4LCB5bWF4LCB6bmVhciwgemZhcik7XG59XG5cbi8vIE5PVEU6IHRoaXMgaXMgaW5lZmZpY2llbnQsIGl0IG1heSBiZSBzZW5zaWJsZSB0byBwcm92aWRlIGlucGxhY2UgdmVyc2lvbnNcbnJnbS50cmFuc2xhdGUgPSBmdW5jdGlvbihtLCB4LCB5LCB6KSB7ICAgIFxuICB2YXIgciA9IHJnbS5tYXQ0KG0pO1xuICByWzEyXSA9IG1bMF0gKiB4ICsgbVs0XSAqIHkgKyBtWyA4XSAqIHogKyBtWzEyXTtcbiAgclsxM10gPSBtWzFdICogeCArIG1bNV0gKiB5ICsgbVsgOV0gKiB6ICsgbVsxM107XG4gIHJbMTRdID0gbVsyXSAqIHggKyBtWzZdICogeSArIG1bMTBdICogeiArIG1bMTRdO1xuICByWzE1XSA9IG1bM10gKiB4ICsgbVs3XSAqIHkgKyBtWzExXSAqIHogKyBtWzE1XTtcbiAgcmV0dXJuIHI7XG59XG5cbnJnbS5yb3RhdGUgPSBmdW5jdGlvbiAobSwgYW5nbGUsIHgsIHksIHopIHsgIFxuICB2YXIgYSA9IHJnbS5yYWRpYW5zKGFuZ2xlKTtcbiAgdmFyIGMgPSBNYXRoLmNvcyhhKTtcbiAgdmFyIHMgPSBNYXRoLnNpbihhKTtcbiAgXG4gIHZhciBsID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG4gIHZhciBueCA9IHggLyBsO1xuICB2YXIgbnkgPSB5IC8gbDtcbiAgdmFyIG56ID0geiAvIGw7XG5cbiAgdmFyIHQwID0gbnggKiAoMSAtIGMpO1xuICB2YXIgdDEgPSBueSAqICgxIC0gYyk7XG4gIHZhciB0MiA9IG56ICogKDEgLSBjKTsgIFxuXG4gIHZhciBkID0gcmdtLm1hdDQoMSk7XG4gIFxuICBkWyAwXSA9IGMgKyB0MCAqIG54O1xuICBkWyAxXSA9IDAgKyB0MCAqIG55ICsgcyAqIG56O1xuICBkWyAyXSA9IDAgKyB0MCAqIG56IC0gcyAqIG55O1xuXG4gIGRbIDRdID0gMCArIHQxICogbnggLSBzICogbno7XG4gIGRbIDVdID0gYyArIHQxICogbnk7XG4gIGRbIDZdID0gMCArIHQxICogbnogKyBzICogbng7XG5cbiAgZFsgOF0gPSAwICsgdDIgKiBueCArIHMgKiBueTtcbiAgZFsgOV0gPSAwICsgdDIgKiBueSAtIHMgKiBueDtcbiAgZFsxMF0gPSBjICsgdDIgKiBuejsgIFxuICBcbiAgdmFyIHIgPSByZ20ubW11bHQobSwgZCk7XG4gIFxuICByWzEyXSA9IG1bMTJdO1xuICByWzEzXSA9IG1bMTNdO1xuICByWzE0XSA9IG1bMTRdO1xuICByWzE1XSA9IG1bMTVdO1xuICBcbiAgcmV0dXJuIHI7XG59XG5cbnJnbS5zY2FsZSA9IGZ1bmN0aW9uKG0sIHgsIHksIHopIHsgICAgXG4gIHZhciByID0gcmdtLm1hdDQoMSk7XG4gIFxuICByWyAwXSA9IG1bIDBdICogeDsgXG4gIHJbIDFdID0gbVsgMV0gKiB4OyBcbiAgclsgMl0gPSBtWyAyXSAqIHg7IFxuICByWyAzXSA9IG1bIDNdICogeDsgXG4gIFxuICByWyA0XSA9IG1bIDRdICogeTsgXG4gIHJbIDVdID0gbVsgNV0gKiB5OyBcbiAgclsgNl0gPSBtWyA2XSAqIHk7IFxuICByWyA3XSA9IG1bIDddICogeTsgXG4gIFxuICByWyA4XSA9IG1bIDhdICogejtcbiAgclsgOV0gPSBtWyA5XSAqIHo7XG4gIHJbMTBdID0gbVsxMF0gKiB6O1xuICByWzExXSA9IG1bMTFdICogejtcbiAgXG4gIHJbMTJdID0gbVsxMl07XG4gIHJbMTNdID0gbVsxM107XG4gIHJbMTRdID0gbVsxNF07XG4gIHJbMTVdID0gbVsxNV07XG4gIFxuICByZXR1cm4gcjtcbn1cblxucmdtLnFyb3RhdGUgPSBmdW5jdGlvbiAoYW5nbGUsIGF4aXMpIHtcbiAgdmFyIGFuICAgID0gcmdtLm5vcm1hbGl6ZShheGlzKTtcbiAgdmFyIHNpbl9hID0gTWF0aC5zaW4ocmdtLnJhZGlhbnMoYW5nbGUvMi4wKSk7XG4gIHZhciBjb3NfYSA9IE1hdGguY29zKHJnbS5yYWRpYW5zKGFuZ2xlLzIuMCkpO1xuICB2YXIgeCA9IGFuWzBdICogc2luX2E7XG4gIHZhciB5ID0gYW5bMV0gKiBzaW5fYTtcbiAgdmFyIHogPSBhblsyXSAqIHNpbl9hO1xuICB2YXIgdyA9IGNvc19hO1xuICByZXR1cm4gcmdtLnF1YXQoeCwgeSwgeiwgdyk7XG59XG5cbnJnbS5xdHJhbnNmb3JtID0gZnVuY3Rpb24gKHEsIHYpIHtcbiAgdmFyIHFuID0gcmdtLm5vcm1hbGl6ZShxKSAgXG4gIHZhciBxdiA9IHJnbS5xdWF0KHZbMF0sIHZbMV0sIHZbMl0sIDApO1xuICB2YXIgcWMgPSByZ20ucWNvbmp1Z2F0ZShxbik7XG4gIFxuICB2YXIgcXIgPSByZ20ucW11bHQocmdtLnFtdWx0KHFuLCBxdiksIHFjKTtcbiAgXG4gIHJldHVybiByZ20udmVjMyhxclswXSwgcXJbMV0sIHFyWzJdKTtcbn1cbiJdfQ==
