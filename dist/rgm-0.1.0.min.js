var rgm={version:"0.1.0"};rgm.vec2=function(){switch(arguments.length){case 0:return new Float32Array(2);case 1:return"number"==typeof arguments[0]?new Float32Array([arguments[0],arguments[0]]):new Float32Array(arguments[0]);case 2:return new Float32Array([arguments[0],arguments[1]]);default:throw new Error("vec2: invalid number of arguments")}},rgm.vec3=function(){switch(arguments.length){case 0:return new Float32Array(3);case 1:return"number"==typeof arguments[0]?new Float32Array([arguments[0],arguments[0],arguments[0]]):new Float32Array(arguments[0]);case 3:return new Float32Array([arguments[0],arguments[1],arguments[2]]);default:throw new Error("vec2: invalid number of arguments")}},rgm.vec4=function(){switch(arguments.length){case 0:return new Float32Array(4);case 1:return"number"==typeof arguments[0]?new Float32Array([arguments[0],arguments[0],arguments[0],arguments[0]]):new Float32Array(arguments[0]);case 4:return new Float32Array([arguments[0],arguments[1],arguments[2],arguments[3]]);default:throw new Error("vec2: invalid number of arguments")}},rgm.mat3=function(){switch(arguments.length){case 0:return new Float32Array([1,0,0,0,1,0,0,0,1]);case 1:return"number"==typeof arguments[0]?new Float32Array([arguments[0],0,0,0,arguments[0],0,0,0,arguments[0]]):new Float32Array(arguments[0]);case 9:return new Float32Array([arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8]]);default:throw new Error("vec2: invalid number of arguments")}},rgm.mat4=function(){switch(arguments.length){case 0:return new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);case 1:return"number"==typeof arguments[0]?new Float32Array([arguments[0],0,0,0,0,arguments[0],0,0,0,0,arguments[0],0,0,0,0,arguments[0]]):new Float32Array(arguments[0]);case 16:return new Float32Array([arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15]]);default:throw new Error("vec2: invalid number of arguments")}},rgm.quat=function(){switch(arguments.length){case 0:return rgm.vec4(0,0,0,1);case 1:return rgm.vec4(arguments[0]);case 4:return rgm.vec4([arguments[0],arguments[1],arguments[2],arguments[3]]);default:throw new Error("vec2: invalid number of arguments")}},rgm.add=function(r,e){if(r.length!=e.length)throw Error("add: a and b must be the same dimension");for(var t=new Float32Array(r.length),n=0;n<r.length;n++)t[n]=r[n]+e[n];return t},rgm.sub=function(r,e){if(r.length!=e.length)throw Error("sub: a and b must be the same dimension");for(var t=new Float32Array(r.length),n=0;n<r.length;n++)t[n]=r[n]-e[n];return t},rgm.neg=function(r){for(var e=new Float32Array(r.length),t=0;t<r.length;t++)e[t]=-r[t];return e},rgm.dot=function(r,e){for(var t=0,n=0;n<r.length;n++)t+=r[n]*e[n];return t},rgm.cross=function(r,e){if(3!=r.length||3!=e.length)throw Error("cross: a and b must be 3D");var t=new Float32Array(3);return t[0]=r[1]*e[2]-r[2]*e[1],t[1]=r[2]*e[0]-r[0]*e[2],t[2]=r[0]*e[1]-r[1]*e[0],t},rgm.vmult=function(r,e){if(r.length!=e.length)throw Error("vmult: a and b must be the same dimension");for(var t=new Float32Array(r.length),n=0;n<r.length;n++)t[n]=r[n]*e[n];return t},rgm.svmult=function(r,e){for(var t=new Float32Array(r.length),n=0;n<r.length;n++)t[n]=r[n]*e;return t},rgm.length=function(r){return Math.sqrt(rgm.dot(r,r))},rgm.normalize=function(r){return rgm.svmult(r,1/rgm.length(r))},rgm.mmult=function(r,e){if(r.length!=e.length)throw Error("mmult: a and b must be the same dimension");for(var t=Math.sqrt(r.length),n=new Float32Array(r.length),a=0;t>a;a++)for(var u=0;t>u;u++){for(var m=0,g=0;t>g;g++)m+=r[a*t+g]*e[g*t+u];n[a*t+u]=m}return n},rgm.mvmult=function(r,e){for(var t=e.length,n=new Float32Array(t),a=0;t>a;a++){n[a]=0;for(var u=0;t>u;u++)n[a]+=r[a*t+u]*e[u]}return n},rgm.qmult=function(r,e){var t=r[3],n=rgm.vec3(r[0],r[1],r[2]),a=e[3],u=rgm.vec3(e[0],e[1],e[2]),m=t*a-rgm.dot(n,u),g=rgm.add(rgm.add(rgm.svmult(u,t),rgm.svmult(n,a)),rgm.cross(n,u));return rgm.quat(g[0],g[1],n[2],m)};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9zb3VyY2UvX2luaXRfLmpzIiwiL3NvdXJjZS9jb25zdHJ1Y3RvcnMuanMiLCIvc291cmNlL2Z1bmN0aW9ucy5qcyJdLCJuYW1lcyI6WyJyZ20iLCJ2ZXJzaW9uIiwidmVjMiIsImFyZ3VtZW50cyIsImxlbmd0aCIsIkZsb2F0MzJBcnJheSIsIkVycm9yIiwidmVjMyIsInZlYzQiLCJtYXQzIiwibWF0NCIsInF1YXQiLCJhZGQiLCJhIiwiYiIsInIiLCJpIiwic3ViIiwibmVnIiwiZG90IiwidiIsImNyb3NzIiwidm11bHQiLCJzdm11bHQiLCJzIiwiTWF0aCIsInNxcnQiLCJub3JtYWxpemUiLCJtbXVsdCIsIm4iLCJqIiwiayIsIm12bXVsdCIsIm0iLCJxbXVsdCIsIndhIiwidmEiLCJ3YiIsInZiIiwidyJdLCJtYXBwaW5ncyI6IkFBQ0EsR0FBQUEsTUFBQUMsUUFBQSxRQ0FBRCxLQUFBRSxLQUFBLFdBQ0EsT0FBQUMsVUFBQUMsUUFFQSxJQUFBLEdBQ0EsTUFBQSxJQUFBQyxjQUFBLEVBQ0EsS0FBQSxHQUNBLE1BQUEsZ0JBQUFGLFdBQUEsR0FDQSxHQUFBRSxlQUFBRixVQUFBLEdBQUFBLFVBQUEsS0FHQSxHQUFBRSxjQUFBRixVQUFBLEdBRUEsS0FBQSxHQUNBLE1BQUEsSUFBQUUsZUFBQUYsVUFBQSxHQUFBQSxVQUFBLElBQ0EsU0FDQSxLQUFBLElBQUFHLE9BQUEsdUNBSUFOLElBQUFPLEtBQUEsV0FDQSxPQUFBSixVQUFBQyxRQUVBLElBQUEsR0FDQSxNQUFBLElBQUFDLGNBQUEsRUFDQSxLQUFBLEdBQ0EsTUFBQSxnQkFBQUYsV0FBQSxHQUNBLEdBQUFFLGVBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFBQSxVQUFBLEtBR0EsR0FBQUUsY0FBQUYsVUFBQSxHQUVBLEtBQUEsR0FDQSxNQUFBLElBQUFFLGVBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFBQSxVQUFBLElBQ0EsU0FDQSxLQUFBLElBQUFHLE9BQUEsdUNBSUFOLElBQUFRLEtBQUEsV0FDQSxPQUFBTCxVQUFBQyxRQUVBLElBQUEsR0FDQSxNQUFBLElBQUFDLGNBQUEsRUFDQSxLQUFBLEdBQ0EsTUFBQSxnQkFBQUYsV0FBQSxHQUNBLEdBQUFFLGVBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFBQSxVQUFBLEdBQUFBLFVBQUEsS0FHQSxHQUFBRSxjQUFBRixVQUFBLEdBRUEsS0FBQSxHQUNBLE1BQUEsSUFBQUUsZUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQUFBLFVBQUEsR0FBQUEsVUFBQSxJQUNBLFNBQ0EsS0FBQSxJQUFBRyxPQUFBLHVDQUlBTixJQUFBUyxLQUFBLFdBQ0EsT0FBQU4sVUFBQUMsUUFFQSxJQUFBLEdBQ0EsTUFBQSxJQUFBQyxlQUFBLEVBQUEsRUFBQSxFQUNBLEVBQUEsRUFBQSxFQUNBLEVBQUEsRUFBQSxHQUNBLEtBQUEsR0FDQSxNQUFBLGdCQUFBRixXQUFBLEdBQ0EsR0FBQUUsZUFBQUYsVUFBQSxHQUFBLEVBQUEsRUFDQSxFQUFBQSxVQUFBLEdBQUEsRUFDQSxFQUFBLEVBQUFBLFVBQUEsS0FHQSxHQUFBRSxjQUFBRixVQUFBLEdBRUEsS0FBQSxHQUNBLE1BQUEsSUFBQUUsZUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQUFBLFVBQUEsR0FDQUEsVUFBQSxHQUFBQSxVQUFBLEdBQUFBLFVBQUEsR0FDQUEsVUFBQSxHQUFBQSxVQUFBLEdBQUFBLFVBQUEsSUFDQSxTQUNBLEtBQUEsSUFBQUcsT0FBQSx1Q0FJQU4sSUFBQVUsS0FBQSxXQUNBLE9BQUFQLFVBQUFDLFFBRUEsSUFBQSxHQUNBLE1BQUEsSUFBQUMsZUFBQSxFQUFBLEVBQUEsRUFBQSxFQUNBLEVBQUEsRUFBQSxFQUFBLEVBQ0EsRUFBQSxFQUFBLEVBQUEsRUFDQSxFQUFBLEVBQUEsRUFBQSxHQUNBLEtBQUEsR0FDQSxNQUFBLGdCQUFBRixXQUFBLEdBQ0EsR0FBQUUsZUFBQUYsVUFBQSxHQUFBLEVBQUEsRUFBQSxFQUNBLEVBQUFBLFVBQUEsR0FBQSxFQUFBLEVBQ0EsRUFBQSxFQUFBQSxVQUFBLEdBQUEsRUFD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QSxJQUVBeUIsRUFBQUosRUFBQUUsRUFBQXJDLElBQUFtQixJQUFBaUIsRUFBQUUsR0FDQWxCLEVBQUFwQixJQUFBWSxJQUFBWixJQUFBWSxJQUFBWixJQUFBdUIsT0FBQWUsRUFBQUgsR0FBQW5DLElBQUF1QixPQUFBYSxFQUFBQyxJQUFBckMsSUFBQXFCLE1BQUFlLEVBQUFFLEdBRUEsT0FBQXRDLEtBQUFXLEtBQUFTLEVBQUEsR0FBQUEsRUFBQSxHQUFBZ0IsRUFBQSxHQUFBRyIsImZpbGUiOiJyZ20tMC4xLjAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbnZhciByZ20gPSB7dmVyc2lvbjogXCIwLjEuMFwifTtcclxuIiwiXHJcbnJnbS52ZWMyID0gZnVuY3Rpb24gKCkge1xyXG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aClcclxuICB7XHJcbiAgICBjYXNlIDA6XHJcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDIpO1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFthcmd1bWVudHNbMF0sIGFyZ3VtZW50c1swXV0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KGFyZ3VtZW50c1swXSk7XHJcbiAgICAgIH1cclxuICAgIGNhc2UgMjpcclxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoW2FyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdXSk7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ZlYzI6IGludmFsaWQgbnVtYmVyIG9mIGFyZ3VtZW50cycpO1xyXG4gIH1cclxufVxyXG5cclxucmdtLnZlYzMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKVxyXG4gIHtcclxuICAgIGNhc2UgMDpcclxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoMyk7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoW2FyZ3VtZW50c1swXSwgYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMF1dKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShhcmd1bWVudHNbMF0pO1xyXG4gICAgICB9XHJcbiAgICBjYXNlIDM6XHJcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFthcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdXSk7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ZlYzI6IGludmFsaWQgbnVtYmVyIG9mIGFyZ3VtZW50cycpO1xyXG4gIH1cclxufVxyXG5cclxucmdtLnZlYzQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKVxyXG4gIHtcclxuICAgIGNhc2UgMDpcclxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoNCk7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoW2FyZ3VtZW50c1swXSwgYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1swXV0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KGFyZ3VtZW50c1swXSk7XHJcbiAgICAgIH1cclxuICAgIGNhc2UgNDpcclxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoW2FyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0sIGFyZ3VtZW50c1szXV0pO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd2ZWMyOiBpbnZhbGlkIG51bWJlciBvZiBhcmd1bWVudHMnKTtcclxuICB9XHJcbn1cclxuXHJcbnJnbS5tYXQzID0gZnVuY3Rpb24gKCkge1xyXG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aClcclxuICB7XHJcbiAgICBjYXNlIDA6XHJcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFsxLjAsIDAuMCwgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wLCAxLjAsIDAuMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMCwgMC4wLCAxLjBdKTtcclxuICAgIGNhc2UgMTpcclxuICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbYXJndW1lbnRzWzBdLCAgICAgICAgICAwLjAsICAgICAgICAgIDAuMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wLCBhcmd1bWVudHNbMF0sICAgICAgICAgIDAuMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wLCAgICAgICAgICAwLjAsIGFyZ3VtZW50c1swXV0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KGFyZ3VtZW50c1swXSk7XHJcbiAgICAgIH1cclxuICAgIGNhc2UgOTpcclxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoW2FyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0sIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzWzNdLCBhcmd1bWVudHNbNF0sIGFyZ3VtZW50c1s1XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c1s2XSwgYXJndW1lbnRzWzddLCBhcmd1bWVudHNbOF1dKTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcigndmVjMjogaW52YWxpZCBudW1iZXIgb2YgYXJndW1lbnRzJyk7XHJcbiAgfVxyXG59XHJcblxyXG5yZ20ubWF0NCA9IGZ1bmN0aW9uICgpIHtcclxuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpXHJcbiAge1xyXG4gICAgY2FzZSAwOlxyXG4gICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbMS4wLCAwLjAsIDAuMCwgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wLCAxLjAsIDAuMCwgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wLCAwLjAsIDEuMCwgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wLCAwLjAsIDAuMCwgMS4wXSk7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoW2FyZ3VtZW50c1swXSwgICAgICAgICAgMC4wLCAgICAgICAgICAwLjAsICAgICAgICAgIDAuMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wLCBhcmd1bWVudHNbMF0sICAgICAgICAgIDAuMCwgICAgICAgICAgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgIDAuMCwgYXJndW1lbnRzWzBdLCAgICAgICAgICAwLjAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMCwgICAgICAgICAgMC4wLCAgICAgICAgICAwLjAsIGFyZ3VtZW50c1swXV0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KGFyZ3VtZW50c1swXSk7XHJcbiAgICAgIH1cclxuICAgIGNhc2UgMTY6XHJcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFthcmd1bWVudHNbIDBdLCBhcmd1bWVudHNbIDFdLCBhcmd1bWVudHNbIDJdLCBhcmd1bWVudHNbIDNdLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c1sgNF0sIGFyZ3VtZW50c1sgNV0sIGFyZ3VtZW50c1sgNl0sIGFyZ3VtZW50c1sgN10sIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzWyA4XSwgYXJndW1lbnRzWyA5XSwgYXJndW1lbnRzWzEwXSwgYXJndW1lbnRzWzExXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c1sxMl0sIGFyZ3VtZW50c1sxM10sIGFyZ3VtZW50c1sxNF0sIGFyZ3VtZW50c1sxNV1dKTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcigndmVjMjogaW52YWxpZCBudW1iZXIgb2YgYXJndW1lbnRzJyk7XHJcbiAgfVxyXG59XHJcblxyXG5yZ20ucXVhdCA9IGZ1bmN0aW9uICgpIHtcclxuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpXHJcbiAge1xyXG4gICAgY2FzZSAwOlxyXG4gICAgICByZXR1cm4gcmdtLnZlYzQoMCwgMCwgMCwgMSk7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIHJldHVybiByZ20udmVjNChhcmd1bWVudHNbMF0pOyAgICAgXHJcbiAgICBjYXNlIDQ6XHJcbiAgICAgIHJldHVybiByZ20udmVjNChbYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSwgYXJndW1lbnRzWzNdXSk7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ZlYzI6IGludmFsaWQgbnVtYmVyIG9mIGFyZ3VtZW50cycpO1xyXG4gIH1cclxufSIsIlxyXG5yZ20uYWRkID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICBpZiAoYS5sZW5ndGggIT0gYi5sZW5ndGgpIHtcclxuICAgIHRocm93IEVycm9yKCdhZGQ6IGEgYW5kIGIgbXVzdCBiZSB0aGUgc2FtZSBkaW1lbnNpb24nKTtcclxuICB9XHJcbiAgXHJcbiAgdmFyIHIgPSBuZXcgRmxvYXQzMkFycmF5KGEubGVuZ3RoKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcclxuICAgIHJbaV0gPSBhW2ldICsgYltpXTtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbnJnbS5zdWIgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gIGlmIChhLmxlbmd0aCAhPSBiLmxlbmd0aCkge1xyXG4gICAgdGhyb3cgRXJyb3IoJ3N1YjogYSBhbmQgYiBtdXN0IGJlIHRoZSBzYW1lIGRpbWVuc2lvbicpO1xyXG4gIH1cclxuICBcclxuICB2YXIgciA9IG5ldyBGbG9hdDMyQXJyYXkoYS5sZW5ndGgpO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xyXG4gICAgcltpXSA9IGFbaV0gLSBiW2ldO1xyXG4gIH1cclxuICBcclxuICByZXR1cm4gcjtcclxufVxyXG5cclxucmdtLm5lZyA9IGZ1bmN0aW9uIChhKSB7XHJcbiAgdmFyIHIgPSBuZXcgRmxvYXQzMkFycmF5KGEubGVuZ3RoKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcclxuICAgIHJbaV0gPSAtYVtpXTtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbnJnbS5kb3QgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gIHZhciB2ID0gMDtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcclxuICAgIHYgKz0gYVtpXSAqIGJbaV07XHJcbiAgfVxyXG4gIHJldHVybiB2O1xyXG59XHJcblxyXG5yZ20uY3Jvc3MgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gIGlmIChhLmxlbmd0aCAhPSAzIHx8XHJcbiAgICAgIGIubGVuZ3RoICE9IDMpIHtcclxuICAgIHRocm93IEVycm9yKCdjcm9zczogYSBhbmQgYiBtdXN0IGJlIDNEJyk7XHJcbiAgfVxyXG4gIFxyXG4gIHZhciByID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcclxuICBcclxuICByWzBdID0gKGFbMV0gKiBiWzJdKSAtIChhWzJdICogYlsxXSk7XHJcbiAgclsxXSA9IChhWzJdICogYlswXSkgLSAoYVswXSAqIGJbMl0pO1xyXG4gIHJbMl0gPSAoYVswXSAqIGJbMV0pIC0gKGFbMV0gKiBiWzBdKTtcclxuICBcclxuICByZXR1cm4gcjtcclxufVxyXG5cclxucmdtLnZtdWx0ID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICBpZiAoYS5sZW5ndGggIT0gYi5sZW5ndGgpIHtcclxuICAgIHRocm93IEVycm9yKCd2bXVsdDogYSBhbmQgYiBtdXN0IGJlIHRoZSBzYW1lIGRpbWVuc2lvbicpO1xyXG4gIH1cclxuICBcclxuICB2YXIgciA9IG5ldyBGbG9hdDMyQXJyYXkoYS5sZW5ndGgpO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xyXG4gICAgcltpXSA9IGFbaV0gKiBiW2ldO1xyXG4gIH1cclxuICByZXR1cm4gcjtcclxufVxyXG5cclxucmdtLnN2bXVsdCA9IGZ1bmN0aW9uICh2LCBzKSB7XHJcbiAgdmFyIHIgPSBuZXcgRmxvYXQzMkFycmF5KHYubGVuZ3RoKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHYubGVuZ3RoOyBpKyspIHtcclxuICAgIHJbaV0gPSB2W2ldICogcztcclxuICB9XHJcbiAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbnJnbS5sZW5ndGggPSBmdW5jdGlvbiAodikgeyAgXHJcbiAgcmV0dXJuIE1hdGguc3FydChyZ20uZG90KHYsIHYpKTtcclxufVxyXG5cclxucmdtLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgcmV0dXJuIHJnbS5zdm11bHQodiwgMS4wIC8gcmdtLmxlbmd0aCh2KSk7XHJcbn1cclxuXHJcbnJnbS5tbXVsdCA9IGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgaWYgKGEubGVuZ3RoICE9IGIubGVuZ3RoKSB7XHJcbiAgICB0aHJvdyBFcnJvcignbW11bHQ6IGEgYW5kIGIgbXVzdCBiZSB0aGUgc2FtZSBkaW1lbnNpb24nKTtcclxuICB9XHJcbiAgXHJcbiAgdmFyIG4gPSBNYXRoLnNxcnQoYS5sZW5ndGgpO1xyXG4gIHZhciByID0gbmV3IEZsb2F0MzJBcnJheShhLmxlbmd0aCk7XHJcbiAgXHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcclxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbjsgaisrKSB7XHJcbiAgICAgIHZhciB2ID0gMDtcclxuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBuOyBrKyspIHtcclxuICAgICAgICB2ID0gdiArIGFbaSpuK2tdICogYltrKm4ral07XHJcbiAgICAgIH1cclxuICAgICAgcltpKm4ral0gPSB2O1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICByZXR1cm4gcjtcclxufVxyXG5cclxucmdtLm12bXVsdCA9IGZ1bmN0aW9uIChtLCB2KSB7XHJcblx0dmFyIG4gPSB2Lmxlbmd0aDtcclxuXHR2YXIgciA9IG5ldyBGbG9hdDMyQXJyYXkobik7XHJcblx0XHJcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspXHJcblx0e1xyXG5cdFx0cltpXSA9IDA7XHJcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG47IGorKylcclxuXHRcdHtcclxuXHRcdFx0XHRyW2ldICs9IG1baSpuK2pdICogdltqXTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0cmV0dXJuIHI7XHJcbn1cclxuXHJcbnJnbS5xbXVsdCA9IGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgdmFyIHdhID0gYVszXTtcclxuICB2YXIgdmEgPSByZ20udmVjMyhhWzBdLCBhWzFdLCBhWzJdKTtcclxuICB2YXIgd2IgPSBiWzNdO1xyXG4gIHZhciB2YiA9IHJnbS52ZWMzKGJbMF0sIGJbMV0sIGJbMl0pO1xyXG4gIFxyXG4gIHZhciB3ID0gd2EgKiB3YiAtIHJnbS5kb3QodmEsIHZiKTtcclxuICB2YXIgdiA9IHJnbS5hZGQocmdtLmFkZChyZ20uc3ZtdWx0KHZiLCB3YSksIHJnbS5zdm11bHQodmEsIHdiKSksIHJnbS5jcm9zcyh2YSwgdmIpKTtcclxuXHJcbiAgcmV0dXJuIHJnbS5xdWF0KHZbMF0sIHZbMV0sIHZhWzJdLCB3KTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=