var rgm={version:"0.1.0"};rgm.vec2=function(){switch(arguments.length){case 0:return new Float32Array(2);case 1:return"number"==typeof arguments[0]?new Float32Array([arguments[0],arguments[0]]):new Float32Array(arguments[0]);case 2:return new Float32Array([arguments[0],arguments[1]]);default:throw new Error("vec2: invalid number of arguments")}},rgm.vec3=function(){switch(arguments.length){case 0:return new Float32Array(3);case 1:return"number"==typeof arguments[0]?new Float32Array([arguments[0],arguments[0],arguments[0]]):new Float32Array(arguments[0]);case 3:return new Float32Array([arguments[0],arguments[1],arguments[2]]);default:throw new Error("vec3: invalid number of arguments")}},rgm.vec4=function(){switch(arguments.length){case 0:return new Float32Array(4);case 1:return"number"==typeof arguments[0]?new Float32Array([arguments[0],arguments[0],arguments[0],arguments[0]]):new Float32Array(arguments[0]);case 4:return new Float32Array([arguments[0],arguments[1],arguments[2],arguments[3]]);default:throw new Error("vec4: invalid number of arguments")}},rgm.mat3=function(){switch(arguments.length){case 0:return new Float32Array([1,0,0,0,1,0,0,0,1]);case 1:return"number"==typeof arguments[0]?new Float32Array([arguments[0],0,0,0,arguments[0],0,0,0,arguments[0]]):new Float32Array(arguments[0]);case 9:return new Float32Array([arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8]]);default:throw new Error("vec2: invalid number of arguments")}},rgm.mat4=function(){switch(arguments.length){case 0:return new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);case 1:return"number"==typeof arguments[0]?new Float32Array([arguments[0],0,0,0,0,arguments[0],0,0,0,0,arguments[0],0,0,0,0,arguments[0]]):new Float32Array(arguments[0]);case 16:return new Float32Array([arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15]]);default:throw new Error("vec2: invalid number of arguments")}},rgm.quat=function(){switch(arguments.length){case 0:return rgm.vec4(0,0,0,1);case 1:return rgm.vec4(arguments[0]);case 4:return rgm.vec4([arguments[0],arguments[1],arguments[2],arguments[3]]);default:throw new Error("vec2: invalid number of arguments")}},rgm.add=function(r,t){if(r.length!=t.length)throw Error("add: a and b must be the same dimension");for(var n=new Float32Array(r.length),e=0;e<r.length;e++)n[e]=r[e]+t[e];return n},rgm.sub=function(r,t){if(r.length!=t.length)throw Error("sub: a and b must be the same dimension");for(var n=new Float32Array(r.length),e=0;e<r.length;e++)n[e]=r[e]-t[e];return n},rgm.neg=function(r){for(var t=new Float32Array(r.length),n=0;n<r.length;n++)t[n]=-r[n];return t},rgm.dot=function(r,t){for(var n=0,e=0;e<r.length;e++)n+=r[e]*t[e];return n},rgm.cross=function(r,t){if(3!=r.length||3!=t.length)throw Error("cross: a and b must be 3D");var n=new Float32Array(3);return n[0]=r[1]*t[2]-r[2]*t[1],n[1]=r[2]*t[0]-r[0]*t[2],n[2]=r[0]*t[1]-r[1]*t[0],n},rgm.vmult=function(r,t){if(r.length!=t.length)throw Error("vmult: a and b must be the same dimension");for(var n=new Float32Array(r.length),e=0;e<r.length;e++)n[e]=r[e]*t[e];return n},rgm.vsmult=function(r,t){for(var n=new Float32Array(r.length),e=0;e<r.length;e++)n[e]=r[e]*t;return n},rgm.length=function(r){return Math.sqrt(rgm.dot(r,r))},rgm.normalize=function(r){return rgm.vsmult(r,1/rgm.length(r))},rgm.mmult=function(r,t){if(r.length!=t.length)throw Error("mmult: a and b must be the same dimension");for(var n=Math.sqrt(r.length),e=new Float32Array(r.length),a=0;n>a;a++)for(var u=0;n>u;u++){for(var m=0,g=0;n>g;g++)m+=r[a*n+g]*t[g*n+u];e[a*n+u]=m}return e},rgm.transpose=function(r){for(var t=Math.sqrt(r.length),n=new Float32Array(r.length),e=0;t>e;e++)for(var a=0;t>a;a++)n[a*t+e]=r[e*t+a];return n},rgm.mvmult=function(r,t){for(var n=t.length,e=new Float32Array(n),a=0;n>a;a++){e[a]=0;for(var u=0;n>u;u++)e[a]+=r[u*n+a]*t[u]}return e},rgm.qmult=function(r,t){var n=r[3],e=rgm.vec3(r[0],r[1],r[2]),a=t[3],u=rgm.vec3(t[0],t[1],t[2]),m=n*a-rgm.dot(e,u),g=rgm.add(rgm.add(rgm.vsmult(u,n),rgm.vsmult(e,a)),rgm.cross(e,u));return rgm.quat(g[0],g[1],e[2],m)},rgm.radians=function(r){return r*Math.PI/180},rgm.degrees=function(r){return 180*r/Math.PI},rgm.ortho=function(r,t,n,e,a,u){var m=t-r,g=e-n,s=u-a,o=rgm.mat4();return o[0]=2/m,o[1]=0,o[2]=0,o[3]=0,o[4]=0,o[5]=2/g,o[6]=0,o[7]=0,o[8]=0,o[9]=0,o[10]=-2/s,o[11]=0,o[12]=-(r+t)/m,o[13]=-(e+n)/g,o[14]=-(u+a)/s,o[15]=1,o},rgm.frustum=function(r,t,n,e,a,u){var m=2*a,g=t-r,s=e-n,o=u-a,l=new Float32Array(16);return l[0]=m/g,l[4]=0,l[8]=(t+r)/g,l[12]=0,l[1]=0,l[5]=m/s,l[9]=(e+n)/s,l[13]=0,l[2]=0,l[6]=0,l[10]=(-u-a)/o,l[14]=-m*u/o,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,l},rgm.perspective=function(r,t,n,e){var a=n*Math.tan(rgm.radians(r)),u=a*t;return rgm.frustum(-u,u,-a,a,n,e)},rgm.translate=function(r,t,n,e){var a=rgm.mat4(r);return a[12]=r[0]*t+r[4]*n+r[8]*e+r[12],a[13]=r[1]*t+r[5]*n+r[9]*e+r[13],a[14]=r[2]*t+r[6]*n+r[10]*e+r[14],a[15]=r[3]*t+r[7]*n+r[11]*e+r[15],a},rgm.rotate=function(r,t,n,e,a){var u=rgm.radians(t),m=Math.cos(u),g=Math.sin(u),s=Math.sqrt(n*n+e*e+a*a),o=n/s,l=e/s,c=a/s,h=o*(1-m),i=l*(1-m),f=c*(1-m),w=rgm.mat4(1);w[0]=m+h*o,w[1]=0+h*l+g*c,w[2]=0+h*c-g*l,w[4]=0+i*o-g*c,w[5]=m+i*l,w[6]=0+i*c+g*o,w[8]=0+f*o+g*l,w[9]=0+f*l-g*o,w[10]=m+f*c;var v=rgm.mmult(r,w);return v[12]=r[12],v[13]=r[13],v[14]=r[14],v[15]=r[15],v},rgm.scale=function(r,t,n,e){var a=rgm.mat4(1);return a[0]=r[0]*t,a[1]=r[1]*t,a[2]=r[2]*t,a[3]=r[3]*t,a[4]=r[4]*n,a[5]=r[5]*n,a[6]=r[6]*n,a[7]=r[7]*n,a[8]=r[8]*e,a[9]=r[9]*e,a[10]=r[10]*e,a[11]=r[11]*e,a[12]=r[12],a[13]=r[13],a[14]=r[14],a[15]=r[15],a};
//# sourceMappingURL=data:application/json;base64,