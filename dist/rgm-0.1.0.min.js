var rgm={version:"0.1.0"};rgm.vec2=function(){switch(arguments.length){case 0:return new Float32Array(2);case 1:if("number"==typeof arguments[0])return new Float32Array([arguments[0],arguments[0]]);switch(arguments[0].length){case 2:return new Float32Array(arguments[0]);case 3:case 4:return new Float32Array([arguments[0][0],arguments[0][1]]);default:throw new Error("vec2: invalid array size")}case 2:return new Float32Array([arguments[0],arguments[1]]);default:throw new Error("vec2: invalid number of arguments")}},rgm.vec3=function(){switch(arguments.length){case 0:return new Float32Array(3);case 1:if("number"==typeof arguments[0])return new Float32Array([arguments[0],arguments[0],arguments[0]]);switch(arguments[0].length){case 2:return new Float32Array([arguments[0][0],arguments[0][1],0]);case 3:return new Float32Array(arguments[0]);case 4:return new Float32Array([arguments[0][0],arguments[0][1],arguments[0][2]]);default:throw new Error("vec3: invalid array size")}case 3:return new Float32Array([arguments[0],arguments[1],arguments[2]]);default:throw new Error("vec3: invalid number of arguments")}},rgm.vec4=function(){switch(arguments.length){case 0:return new Float32Array(4);case 1:if("number"==typeof arguments[0])return new Float32Array([arguments[0],arguments[0],arguments[0],arguments[0]]);switch(arguments[0].length){case 2:return new Float32Array([arguments[0][0],arguments[0][1],0,0]);case 3:return new Float32Array([arguments[0][0],arguments[0][1],arguments[0][2],0]);case 4:return new Float32Array(arguments[0]);default:throw new Error("vec3: invalid array size")}case 4:return new Float32Array([arguments[0],arguments[1],arguments[2],arguments[3]]);default:throw new Error("vec4: invalid number of arguments")}},rgm.mat3=function(){switch(arguments.length){case 0:return new Float32Array([1,0,0,0,1,0,0,0,1]);case 1:if("number"==typeof arguments[0])return new Float32Array([arguments[0],0,0,0,arguments[0],0,0,0,arguments[0]]);switch(arguments[0].length){case 9:return new Float32Array(arguments[0]);case 16:return new Float32Array([arguments[0][0],arguments[0][1],arguments[0][2],arguments[0][4],arguments[0][5],arguments[0][6],arguments[0][8],arguments[0][9],arguments[0][10]]);default:throw new Error("mat3: invalid array size")}case 9:return new Float32Array([arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8]]);default:throw new Error("vec2: invalid number of arguments")}},rgm.mat4=function(){switch(arguments.length){case 0:return new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);case 1:if("number"==typeof arguments[0])return new Float32Array([arguments[0],0,0,0,0,arguments[0],0,0,0,0,arguments[0],0,0,0,0,arguments[0]]);switch(arguments[0].length){case 9:return new Float32Array([arguments[0][0],arguments[0][1],arguments[0][2],0,arguments[0][3],arguments[0][4],arguments[0][5],0,arguments[0][6],arguments[0][7],arguments[0][8],0,0,0,0,1]);case 16:return new Float32Array(arguments[0]);default:throw new Error("mat3: invalid array size")}case 16:return new Float32Array([arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5],arguments[6],arguments[7],arguments[8],arguments[9],arguments[10],arguments[11],arguments[12],arguments[13],arguments[14],arguments[15]]);default:throw new Error("vec2: invalid number of arguments")}},rgm.quat=function(){switch(arguments.length){case 0:return rgm.vec4(0,0,0,1);case 1:return rgm.vec4(arguments[0]);case 4:return rgm.vec4([arguments[0],arguments[1],arguments[2],arguments[3]]);default:throw new Error("vec2: invalid number of arguments")}},rgm.add=function(r,t){if(r.length!=t.length)throw Error("add: a and b must be the same dimension");for(var e=new Float32Array(r.length),n=0;n<r.length;n++)e[n]=r[n]+t[n];return e},rgm.sub=function(r,t){if(r.length!=t.length)throw Error("sub: a and b must be the same dimension");for(var e=new Float32Array(r.length),n=0;n<r.length;n++)e[n]=r[n]-t[n];return e},rgm.neg=function(r){for(var t=new Float32Array(r.length),e=0;e<r.length;e++)t[e]=-r[e];return t},rgm.dot=function(r,t){for(var e=0,n=0;n<r.length;n++)e+=r[n]*t[n];return e},rgm.cross=function(r,t){if(3!=r.length||3!=t.length)throw Error("cross: a and b must be 3D");var e=new Float32Array(3);return e[0]=r[1]*t[2]-r[2]*t[1],e[1]=r[2]*t[0]-r[0]*t[2],e[2]=r[0]*t[1]-r[1]*t[0],e},rgm.vmult=function(r,t){if(r.length!=t.length)throw Error("vmult: a and b must be the same dimension");for(var e=new Float32Array(r.length),n=0;n<r.length;n++)e[n]=r[n]*t[n];return e},rgm.vsmult=function(r,t){for(var e=new Float32Array(r.length),n=0;n<r.length;n++)e[n]=r[n]*t;return e},rgm.length=function(r){return Math.sqrt(rgm.dot(r,r))},rgm.normalize=function(r){return rgm.vsmult(r,1/rgm.length(r))},rgm.mmult=function(r,t){if(r.length!=t.length)throw Error("mmult: a and b must be the same dimension");for(var e=Math.sqrt(r.length),n=new Float32Array(r.length),a=0;e>a;a++)for(var u=0;e>u;u++){for(var m=0,g=0;e>g;g++)m+=r[a*e+g]*t[g*e+u];n[a*e+u]=m}return n},rgm.transpose=function(r){for(var t=Math.sqrt(r.length),e=new Float32Array(r.length),n=0;t>n;n++)for(var a=0;t>a;a++)e[a*t+n]=r[n*t+a];return e},rgm.mvmult=function(r,t){for(var e=t.length,n=new Float32Array(e),a=0;e>a;a++){n[a]=0;for(var u=0;e>u;u++)n[a]+=r[u*e+a]*t[u]}return n},rgm.qmult=function(r,t){var e=r[3],n=rgm.vec3(r[0],r[1],r[2]),a=t[3],u=rgm.vec3(t[0],t[1],t[2]),m=e*a-rgm.dot(n,u),g=rgm.add(rgm.add(rgm.vsmult(u,e),rgm.vsmult(n,a)),rgm.cross(n,u));return rgm.quat(g[0],g[1],n[2],m)},rgm.qconjugate=function(r){return rgm.quat(-r[0],-r[1],-r[2],r[3])},rgm.quat2mat4=function(r){var t=r[0]*r[0],e=r[0]*r[1],n=r[0]*r[2],a=r[0]*r[3],u=r[1]*r[1],m=r[1]*r[2],g=r[1]*r[3],s=r[2]*r[2],o=r[2]*r[3],l=rgm.mat4(1);return l[0]=1-2*(u+s),l[4]=2*(e-o),l[8]=2*(n+g),l[1]=2*(e+o),l[5]=1-2*(t+s),l[9]=2*(m-a),l[2]=2*(n-g),l[6]=2*(m+a),l[10]=1-2*(t+u),l[3]=l[7]=l[11]=l[12]=l[13]=l[14]=0,l[15]=1,l},rgm.equal=function(r,t,e){if(r.length!=t.length)return!1;for(var n=void 0!==e?e:1e-6,a=0;a<r.length;a++)if(Math.abs(r[a]-t[a])>n)return!1;return!0},rgm.radians=function(r){return r*(Math.PI/180)},rgm.degrees=function(r){return r*(180/Math.PI)},rgm.ortho=function(r,t,e,n,a,u){var m=t-r,g=n-e,s=u-a,o=rgm.mat4();return o[0]=2/m,o[1]=0,o[2]=0,o[3]=0,o[4]=0,o[5]=2/g,o[6]=0,o[7]=0,o[8]=0,o[9]=0,o[10]=-2/s,o[11]=0,o[12]=-(r+t)/m,o[13]=-(n+e)/g,o[14]=-(u+a)/s,o[15]=1,o},rgm.frustum=function(r,t,e,n,a,u){var m=2*a,g=t-r,s=n-e,o=u-a,l=new Float32Array(16);return l[0]=m/g,l[4]=0,l[8]=(t+r)/g,l[12]=0,l[1]=0,l[5]=m/s,l[9]=(n+e)/s,l[13]=0,l[2]=0,l[6]=0,l[10]=(-u-a)/o,l[14]=-m*u/o,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,l},rgm.perspective=function(r,t,e,n){var a=e*Math.tan(rgm.radians(r)),u=a*t;return rgm.frustum(-u,u,-a,a,e,n)},rgm.translate=function(r,t,e,n){var a=rgm.mat4(r);return a[12]=r[0]*t+r[4]*e+r[8]*n+r[12],a[13]=r[1]*t+r[5]*e+r[9]*n+r[13],a[14]=r[2]*t+r[6]*e+r[10]*n+r[14],a[15]=r[3]*t+r[7]*e+r[11]*n+r[15],a},rgm.rotate=function(r,t,e,n,a){var u=rgm.radians(t),m=Math.cos(u),g=Math.sin(u),s=Math.sqrt(e*e+n*n+a*a),o=e/s,l=n/s,i=a/s,c=o*(1-m),h=l*(1-m),f=i*(1-m),w=rgm.mat4(1);w[0]=m+c*o,w[1]=0+c*l+g*i,w[2]=0+c*i-g*l,w[4]=0+h*o-g*i,w[5]=m+h*l,w[6]=0+h*i+g*o,w[8]=0+f*o+g*l,w[9]=0+f*l-g*o,w[10]=m+f*i;var v=rgm.mmult(r,w);return v[12]=r[12],v[13]=r[13],v[14]=r[14],v[15]=r[15],v},rgm.scale=function(r,t,e,n){var a=rgm.mat4(1);return a[0]=r[0]*t,a[1]=r[1]*t,a[2]=r[2]*t,a[3]=r[3]*t,a[4]=r[4]*e,a[5]=r[5]*e,a[6]=r[6]*e,a[7]=r[7]*e,a[8]=r[8]*n,a[9]=r[9]*n,a[10]=r[10]*n,a[11]=r[11]*n,a[12]=r[12],a[13]=r[13],a[14]=r[14],a[15]=r[15],a},rgm.qrotate=function(r,t){var e=rgm.normalize(t),n=Math.sin(rgm.radians(r/2)),a=Math.cos(rgm.radians(r/2)),u=e[0]*n,m=e[1]*n,g=e[2]*n,s=a;return rgm.quat(u,m,g,s)},rgm.qtransform=function(r,t){var e=rgm.normalize(r),n=rgm.quat(t[0],t[1],t[2],0),a=rgm.qconjugate(e),u=rgm.qmult(rgm.qmult(e,n),a);return rgm.vec3(u[0],u[1],u[2])};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9zb3VyY2UvX2luaXRfLmpzIiwiL3NvdXJjZS9jb25zdHJ1Y3RvcnMuanMiLCIvc291cmNlL2Z1bmN0aW9ucy5qcyIsIi9zb3VyY2UvdHJhbnNmb3Jtcy5qcyJdLCJuYW1lcyI6WyJyZ20iLCJ2ZXJzaW9uIiwidmVjMiIsImFyZ3VtZW50cyIsImxlbmd0aCIsIkZsb2F0MzJBcnJheSIsIkVycm9yIiwidmVjMyIsInZlYzQiLCJtYXQzIiwibWF0NCIsInF1YXQiLCJhZGQiLCJhIiwiYiIsInIiLCJpIiwic3ViIiwibmVnIiwiZG90IiwidiIsImNyb3NzIiwidm11bHQiLCJ2c211bHQiLCJzIiwiTWF0aCIsInNxcnQiLCJub3JtYWxpemUiLCJtbXVsdCIsIm4iLCJqIiwiayIsInRyYW5zcG9zZSIsIm0iLCJtdm11bHQiLCJxbXVsdCIsIndhIiwidmEiLCJ3YiIsInZiIiwidyIsInFjb25qdWdhdGUiLCJxIiwicXVhdDJtYXQ0IiwieHgiLCJ4eSIsInh6IiwieHciLCJ5eSIsInl6IiwieXciLCJ6eiIsInp3IiwibWF0IiwiZXF1YWwiLCJlcHMiLCJlIiwidW5kZWZpbmVkIiwiYWJzIiwicmFkaWFucyIsImRlZ3JlZXMiLCJQSSIsIm9ydGhvIiwibGVmdCIsInJpZ2h0IiwiYm90dG9tIiwidG9wIiwibmVhciIsImZhciIsInJsIiwidGIiLCJmbiIsImZydXN0dW0iLCJ6bmVhciIsInpmYXIiLCJ0MSIsInQyIiwidDMiLCJ0NCIsInBlcnNwZWN0aXZlIiwiZm92eSIsImFzcGVjdCIsInltYXgiLCJ0YW4iLCJ4bWF4IiwidHJhbnNsYXRlIiwieCIsInkiLCJ6Iiwicm90YXRlIiwiYW5nbGUiLCJjIiwiY29zIiwic2luIiwibCIsIm54IiwibnkiLCJueiIsInQwIiwiZCIsInNjYWxlIiwicXJvdGF0ZSIsImF4aXMiLCJhbiIsInNpbl9hIiwiY29zX2EiLCJxdHJhbnNmb3JtIiwicW4iLCJxdiIsInFjIiwicXIiXSwibWFwcGluZ3MiOiJBQUNBLEdBQUFBLE1BQUFDLFFBQUEsUUNBQUQsS0FBQUUsS0FBQSxXQUNBLE9BQUFDLFVBQUFDLFFBRUEsSUFBQSxHQUNBLE1BQUEsSUFBQUMsY0FBQSxFQUNBLEtBQUEsR0FDQSxHQUFBLGdCQUFBRixXQUFBLEdBQ0EsTUFBQSxJQUFBRSxlQUFBRixVQUFBLEdBQUFBLFVBQUEsSUFHQSxRQUFBQSxVQUFBLEdBQUFDLFFBQ0EsSUFBQSxHQUNBLE1BQUEsSUFBQUMsY0FBQUYsVUFBQSxHQUNBLEtBQUEsR0FDQSxJQUFBLEdBQ0EsTUFBQSxJQUFBRSxlQUFBRixVQUFBLEdBQUEsR0FBQUEsVUFBQSxHQUFBLElBQ0EsU0FDQSxLQUFBLElBQUFHLE9BQUEsNEJBR0EsSUFBQSxHQUNBLE1BQUEsSUFBQUQsZUFBQUYsVUFBQSxHQUFBQSxVQUFBLElBQ0EsU0FDQSxLQUFBLElBQUFHLE9BQUEsdUNBSUFOLElBQUFPLEtBQUEsV0FDQSxPQUFBSixVQUFBQyxRQUVBLElBQUEsR0FDQSxNQUFBLElBQUFDLGNBQUEsRUFDQSxLQUFBLEdBQ0EsR0FBQSxnQkFBQUYsV0FBQSxHQUNBLE1BQUEsSUFBQUUsZUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQUFBLFVBQUEsSUFHQSxRQUFBQSxVQUFBLEdBQUFDLFFBQ0EsSUFBQSxHQUNBLE1BQUEsSUFBQUMsZUFBQUYsVUFBQSxHQUFBLEdBQUFBLFVBQUEsR0FBQSxHQUFBLEdBQ0EsS0FBQSxHQUNBLE1BQUEsSUFBQUUsY0FBQUYsVUFBQSxHQUNBLEtBQUEsR0FDQSxNQUFBLElBQUFFLGVBQUFGLFVBQUEsR0FBQSxHQUFBQSxVQUFBLEdBQUEsR0FBQUEsVUFBQSxHQUFBLElBQ0EsU0FDQSxLQUFBLElBQUFHLE9BQUEsNEJBR0EsSUFBQSxHQUNBLE1BQUEsSUFBQUQsZUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQUFBLFVBQUEsSUFDQSxTQUNBLEtBQUEsSUFBQUcsT0FBQSx1Q0FJQU4sSUFBQVEsS0FBQSxXQUNBLE9BQUFMLFVBQUFDLFFBRUEsSUFBQSxHQUNBLE1BQUEsSUFBQUMsY0FBQSxFQUNBLEtBQUEsR0FDQSxHQUFBLGdCQUFBRixXQUFBLEdBQ0EsTUFBQSxJQUFBRSxlQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBQUEsVUFBQSxHQUFBQSxVQUFBLElBR0EsUUFBQUEsVUFBQSxHQUFBQyxRQUNBLElBQUEsR0FDQSxNQUFBLElBQUFDLGVBQUFGLFVBQUEsR0FBQSxHQUFBQSxVQUFBLEdBQUEsR0FBQSxFQUFBLEdBQ0EsS0FBQSxHQUNBLE1BQUEsSUFBQUUsZUFBQUYsVUFBQSxHQUFBLEdBQUFBLFVBQUEsR0FBQSxHQUFBQSxVQUFBLEdBQUEsR0FBQSxHQUNBLEtBQUEsR0FDQSxNQUFBLElBQUFFLGNBQUFGLFVBQUEsR0FDQSxTQUNBLEtBQUEsSUFBQUcsT0FBQSw0QkFHQSxJQUFBLEdBQ0EsTUFBQSxJQUFBRCxlQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBQUEsVUFBQSxHQUFBQSxVQUFBLElBQ0EsU0FDQSxLQUFBLElBQUFHLE9BQUEsdUNBSUFOLElBQUFTLEtBQUEsV0FDQSxPQUFBTixVQUFBQyxRQUVBLElBQUEsR0FDQSxNQUFBLElBQUFDLGVBQUEsRUFBQSxFQUFBLEVBQ0EsRUFBQSxFQUFBLEVBQ0EsRUFBQSxFQUFBLEdBQ0EsS0FBQSxHQUNBLEdBQUEsZ0JBQUFGLFdBQUEsR0FDQSxNQUFBLElBQUFFLGVBQUFGLFVBQUEsR0FBQSxFQUFBLEVBQ0EsRUFBQUEsVUFBQSxHQUFBLEVBQ0EsRUFBQSxFQUFBQSxVQUFBLElBR0EsUUFBQUEsVUFBQSxHQUFBQyxRQUNBLElBQUEsR0FDQSxNQUFBLElBQUFDLGNBQUFGLFVBQUEsR0FDQSxLQUFBLElBQ0EsTUFBQSxJQUFBRSxlQUFBRixVQUFBLEdBQUEsR0FBQUEsVUFBQSxHQUFBLEdBQUFBLFVBQUEsR0FBQSxHQUNBQSxVQUFBLEdBQUEsR0FBQUEsVUFBQSxHQUFBLEdBQUFBLFVBQUEsR0FBQSxHQUNBQSxVQUFBLEdBQUEsR0FBQUEsVUFBQSxHQUFBLEdBQUFBLFVBQUEsR0FBQSxLQUNBLFNBQ0EsS0FBQSxJQUFBRyxPQUFBLDRCQUdBLElBQUEsR0FDQSxNQUFBLElBQUFELGVBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFBQSxVQUFBLEdBQ0FBLFVBQUEsR0FBQUEsVUFBQSxHQUFBQSxVQUFBLEdBQ0FBLFVBQUEsR0FBQUEsVUFBQSxHQUFBQSxVQUFBLElBQ0EsU0FDQSxLQUFBLElBQUFHLE9BQUEsdUNBSUFOLElBQUFVLEtBQUEsV0FDQSxPQUFBUCxVQUFBQyxRQUVBLElBQUEsR0FDQSxNQUFBLElBQUFDLGVBQUEsRUFBQSxFQUFBLEVBQUEsRUFDQSxFQUFBLEVBQUEsRUFBQSxFQUNBLEVBQUEsRUFBQSxFQUFBLEVBQ0EsRUFBQSxFQUFBLEVBQUEsR0FDQSxLQUFBLEdBQ0EsR0FBQSxnQkFBQUYsV0FBQSxHQUNBLE1BQUEsSUFBQUUsZUFBQUYsVUFBQSxHQUFBLEVBQUEsRUFBQSxFQUNBLEVBQUFBLFVBQUEsR0FBQSxFQUFBLEVBQ0EsRUFBQSxFQUFBQSxVQUFBLEdBQUEsRUFDQSxFQUFBLEVBQUEsRUFBQUEsVUFBQSxJQUdBLFFBQUFBLFVBQUEsR0FBQUMsUUFDQSxJQUFBLEdBQ0EsTUFBQSxJQUFBQyxlQUFBRixVQUFBLEdBQUEsR0FBQUEsVUFBQSxHQUFBLEdBQUFBLFVBQUEsR0FBQSxHQUFBLEVBQ0FBLFVBQUEsR0FBQSxHQUFBQSxVQUFBLEdBQUEsR0FBQUEsVUFBQSxHQUFBLEdBQUEsRUFDQUEsVUFBQSxHQUFBLEdBQUFBLFVBQUEsR0FBQSxHQUFBQSxVQUFBLEdBQUEsR0FBQSxFQUNBLEVBQUEsRUFBQSxFQUFBLEdBQ0EsS0FBQSxJQUNBLE1BQUEsSUFBQUUsY0FBQUYsVUFBQSxHQUNBLFNBQ0EsS0FBQSxJQUFBRyxPQUFBLDRCQUdBLElBQUEsSUFDQSxNQUFBLElBQUFELGVBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFBQSxVQUFBLEdBQUFBLFVBQUEsR0FDQUEsVUFBQSxHQUFBQSxVQUFBLEdBQUFBLFVBQUEsR0FBQUEsVUFBQSxHQUNBQSxVQUFBLEdBQUFBLFVBQUEsR0FBQUEsVUFBQSxJQUFBQSxVQUFBLElBQ0FBLFVBQUEsSUFBQUEsVUFBQSxJ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QUNBLE9BQUF6RyxLQUFBVyxLQUFBMkUsRUFBQUMsRUFBQUMsRUFBQWhELElBR0F4QyxJQUFBMEcsV0FBQSxTQUFBaEUsRUFBQXRCLEdBQ0EsR0FBQXVGLEdBQUEzRyxJQUFBMkIsVUFBQWUsR0FDQWtFLEVBQUE1RyxJQUFBVyxLQUFBUyxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBLEdBQ0F5RixFQUFBN0csSUFBQXlDLFdBQUFrRSxHQUVBRyxFQUFBOUcsSUFBQW1DLE1BQUFuQyxJQUFBbUMsTUFBQXdFLEVBQUFDLEdBQUFDLEVBRUEsT0FBQTdHLEtBQUFPLEtBQUF1RyxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSIsImZpbGUiOiJyZ20tMC4xLjAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbnZhciByZ20gPSB7dmVyc2lvbjogXCIwLjEuMFwifTtcclxuIiwiXHJcbnJnbS52ZWMyID0gZnVuY3Rpb24gKCkge1xyXG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aClcclxuICB7XHJcbiAgICBjYXNlIDA6XHJcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDIpO1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFthcmd1bWVudHNbMF0sIGFyZ3VtZW50c1swXV0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHN3aXRjaCAoYXJndW1lbnRzWzBdLmxlbmd0aCkge1xyXG4gICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShhcmd1bWVudHNbMF0pOyAgICAgICAgXHJcbiAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFthcmd1bWVudHNbMF1bMF0sIGFyZ3VtZW50c1swXVsxXV0pOyAgICAgICAgXHJcbiAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ZlYzI6IGludmFsaWQgYXJyYXkgc2l6ZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgY2FzZSAyOlxyXG4gICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV1dKTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcigndmVjMjogaW52YWxpZCBudW1iZXIgb2YgYXJndW1lbnRzJyk7XHJcbiAgfVxyXG59XHJcblxyXG5yZ20udmVjMyA9IGZ1bmN0aW9uICgpIHtcclxuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpXHJcbiAge1xyXG4gICAgY2FzZSAwOlxyXG4gICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSgzKTtcclxuICAgIGNhc2UgMTpcclxuICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1swXV0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgeyAgICAgICAgXHJcbiAgICAgICAgc3dpdGNoIChhcmd1bWVudHNbMF0ubGVuZ3RoKSB7XHJcbiAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFthcmd1bWVudHNbMF1bMF0sIGFyZ3VtZW50c1swXVsxXSwgMC4wXSk7ICAgICAgICBcclxuICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoYXJndW1lbnRzWzBdKTsgICAgICAgIFxyXG4gICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbYXJndW1lbnRzWzBdWzBdLCBhcmd1bWVudHNbMF1bMV0sIGFyZ3VtZW50c1swXVsyXV0pOyAgICAgICAgXHJcbiAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ZlYzM6IGludmFsaWQgYXJyYXkgc2l6ZScpO1xyXG4gICAgICAgIH0gICAgICAgXHJcbiAgICAgIH0gICAgICBcclxuICAgIGNhc2UgMzpcclxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoW2FyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl1dKTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcigndmVjMzogaW52YWxpZCBudW1iZXIgb2YgYXJndW1lbnRzJyk7XHJcbiAgfVxyXG59XHJcblxyXG5yZ20udmVjNCA9IGZ1bmN0aW9uICgpIHtcclxuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpXHJcbiAge1xyXG4gICAgY2FzZSAwOlxyXG4gICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSg0KTtcclxuICAgIGNhc2UgMTpcclxuICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzBdXSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7ICAgICAgICBcclxuICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50c1swXS5sZW5ndGgpIHtcclxuICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoW2FyZ3VtZW50c1swXVswXSwgYXJndW1lbnRzWzBdWzFdLCAwLjAsIDAuMF0pOyAgICAgICAgXHJcbiAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFthcmd1bWVudHNbMF1bMF0sIGFyZ3VtZW50c1swXVsxXSwgYXJndW1lbnRzWzBdWzJdLCAwLjBdKTsgICAgICAgIFxyXG4gICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShhcmd1bWVudHNbMF0pOyAgICAgICAgXHJcbiAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ZlYzM6IGludmFsaWQgYXJyYXkgc2l6ZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgY2FzZSA0OlxyXG4gICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSwgYXJndW1lbnRzWzNdXSk7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ZlYzQ6IGludmFsaWQgbnVtYmVyIG9mIGFyZ3VtZW50cycpO1xyXG4gIH1cclxufVxyXG5cclxucmdtLm1hdDMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKVxyXG4gIHtcclxuICAgIGNhc2UgMDpcclxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoWzEuMCwgMC4wLCAwLjAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAsIDEuMCwgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wLCAwLjAsIDEuMF0pO1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFthcmd1bWVudHNbMF0sICAgICAgICAgIDAuMCwgICAgICAgICAgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAsIGFyZ3VtZW50c1swXSwgICAgICAgICAgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgIDAuMCwgYXJndW1lbnRzWzBdXSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgc3dpdGNoIChhcmd1bWVudHNbMF0ubGVuZ3RoKSB7XHJcbiAgICAgICAgICBjYXNlIDk6XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KGFyZ3VtZW50c1swXSk7ICAgICAgICBcclxuICAgICAgICAgIGNhc2UgMTY6XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFthcmd1bWVudHNbMF1bMF0sIGFyZ3VtZW50c1swXVsxXSwgYXJndW1lbnRzWzBdWyAyXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c1swXVs0XSwgYXJndW1lbnRzWzBdWzVdLCBhcmd1bWVudHNbMF1bIDZdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzWzBdWzhdLCBhcmd1bWVudHNbMF1bOV0sIGFyZ3VtZW50c1swXVsxMF1dKTtcclxuICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbWF0MzogaW52YWxpZCBhcnJheSBzaXplJyk7XHJcbiAgICAgICAgfSAgICAgICAgXHJcbiAgICAgIH1cclxuICAgIGNhc2UgOTpcclxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoW2FyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0sIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzWzNdLCBhcmd1bWVudHNbNF0sIGFyZ3VtZW50c1s1XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c1s2XSwgYXJndW1lbnRzWzddLCBhcmd1bWVudHNbOF1dKTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcigndmVjMjogaW52YWxpZCBudW1iZXIgb2YgYXJndW1lbnRzJyk7XHJcbiAgfVxyXG59XHJcblxyXG5yZ20ubWF0NCA9IGZ1bmN0aW9uICgpIHtcclxuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpXHJcbiAge1xyXG4gICAgY2FzZSAwOlxyXG4gICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbMS4wLCAwLjAsIDAuMCwgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wLCAxLjAsIDAuMCwgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wLCAwLjAsIDEuMCwgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wLCAwLjAsIDAuMCwgMS4wXSk7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoW2FyZ3VtZW50c1swXSwgICAgICAgICAgMC4wLCAgICAgICAgICAwLjAsICAgICAgICAgIDAuMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wLCBhcmd1bWVudHNbMF0sICAgICAgICAgIDAuMCwgICAgICAgICAgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAsICAgICAgICAgIDAuMCwgYXJndW1lbnRzWzBdLCAgICAgICAgICAwLjAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAuMCwgICAgICAgICAgMC4wLCAgICAgICAgICAwLjAsIGFyZ3VtZW50c1swXV0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHN3aXRjaCAoYXJndW1lbnRzWzBdLmxlbmd0aCkge1xyXG4gICAgICAgICAgY2FzZSA5OlxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbYXJndW1lbnRzWzBdWzBdLCBhcmd1bWVudHNbMF1bMV0sIGFyZ3VtZW50c1swXVsyXSwgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzWzBdWzNdLCBhcmd1bWVudHNbMF1bNF0sIGFyZ3VtZW50c1swXVs1XSwgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzWzBdWzZdLCBhcmd1bWVudHNbMF1bN10sIGFyZ3VtZW50c1swXVs4XSwgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wLCAgICAgICAgICAgICAwLjAsICAgICAgICAgICAgIDAuMCwgMS4wXSk7XHJcbiAgICAgICAgICBjYXNlIDE2OlxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShhcmd1bWVudHNbMF0pO1xyXG4gICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXQzOiBpbnZhbGlkIGFycmF5IHNpemUnKTtcclxuICAgICAgICB9ICAgICAgICBcclxuICAgICAgfVxyXG4gICAgY2FzZSAxNjpcclxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoW2FyZ3VtZW50c1sgMF0sIGFyZ3VtZW50c1sgMV0sIGFyZ3VtZW50c1sgMl0sIGFyZ3VtZW50c1sgM10sIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzWyA0XSwgYXJndW1lbnRzWyA1XSwgYXJndW1lbnRzWyA2XSwgYXJndW1lbnRzWyA3XSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNbIDhdLCBhcmd1bWVudHNbIDldLCBhcmd1bWVudHNbMTBdLCBhcmd1bWVudHNbMTFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzWzEyXSwgYXJndW1lbnRzWzEzXSwgYXJndW1lbnRzWzE0XSwgYXJndW1lbnRzWzE1XV0pO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd2ZWMyOiBpbnZhbGlkIG51bWJlciBvZiBhcmd1bWVudHMnKTtcclxuICB9XHJcbn1cclxuXHJcbnJnbS5xdWF0ID0gZnVuY3Rpb24gKCkge1xyXG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aClcclxuICB7XHJcbiAgICBjYXNlIDA6XHJcbiAgICAgIHJldHVybiByZ20udmVjNCgwLCAwLCAwLCAxKTtcclxuICAgIGNhc2UgMTpcclxuICAgICAgcmV0dXJuIHJnbS52ZWM0KGFyZ3VtZW50c1swXSk7ICAgICBcclxuICAgIGNhc2UgNDpcclxuICAgICAgcmV0dXJuIHJnbS52ZWM0KFthcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdLCBhcmd1bWVudHNbM11dKTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcigndmVjMjogaW52YWxpZCBudW1iZXIgb2YgYXJndW1lbnRzJyk7XHJcbiAgfVxyXG59XHJcbiIsIlxyXG5yZ20uYWRkID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICBpZiAoYS5sZW5ndGggIT0gYi5sZW5ndGgpIHtcclxuICAgIHRocm93IEVycm9yKCdhZGQ6IGEgYW5kIGIgbXVzdCBiZSB0aGUgc2FtZSBkaW1lbnNpb24nKTtcclxuICB9XHJcbiAgXHJcbiAgdmFyIHIgPSBuZXcgRmxvYXQzMkFycmF5KGEubGVuZ3RoKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcclxuICAgIHJbaV0gPSBhW2ldICsgYltpXTtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbnJnbS5zdWIgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gIGlmIChhLmxlbmd0aCAhPSBiLmxlbmd0aCkge1xyXG4gICAgdGhyb3cgRXJyb3IoJ3N1YjogYSBhbmQgYiBtdXN0IGJlIHRoZSBzYW1lIGRpbWVuc2lvbicpO1xyXG4gIH1cclxuICBcclxuICB2YXIgciA9IG5ldyBGbG9hdDMyQXJyYXkoYS5sZW5ndGgpO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xyXG4gICAgcltpXSA9IGFbaV0gLSBiW2ldO1xyXG4gIH1cclxuICBcclxuICByZXR1cm4gcjtcclxufVxyXG5cclxucmdtLm5lZyA9IGZ1bmN0aW9uIChhKSB7XHJcbiAgdmFyIHIgPSBuZXcgRmxvYXQzMkFycmF5KGEubGVuZ3RoKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcclxuICAgIHJbaV0gPSAtYVtpXTtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbnJnbS5kb3QgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gIHZhciB2ID0gMDtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcclxuICAgIHYgKz0gYVtpXSAqIGJbaV07XHJcbiAgfVxyXG4gIHJldHVybiB2O1xyXG59XHJcblxyXG5yZ20uY3Jvc3MgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gIGlmIChhLmxlbmd0aCAhPSAzIHx8XHJcbiAgICAgIGIubGVuZ3RoICE9IDMpIHtcclxuICAgIHRocm93IEVycm9yKCdjcm9zczogYSBhbmQgYiBtdXN0IGJlIDNEJyk7XHJcbiAgfVxyXG4gIFxyXG4gIHZhciByID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcclxuICBcclxuICByWzBdID0gKGFbMV0gKiBiWzJdKSAtIChhWzJdICogYlsxXSk7XHJcbiAgclsxXSA9IChhWzJdICogYlswXSkgLSAoYVswXSAqIGJbMl0pO1xyXG4gIHJbMl0gPSAoYVswXSAqIGJbMV0pIC0gKGFbMV0gKiBiWzBdKTtcclxuICBcclxuICByZXR1cm4gcjtcclxufVxyXG5cclxucmdtLnZtdWx0ID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICBpZiAoYS5sZW5ndGggIT0gYi5sZW5ndGgpIHtcclxuICAgIHRocm93IEVycm9yKCd2bXVsdDogYSBhbmQgYiBtdXN0IGJlIHRoZSBzYW1lIGRpbWVuc2lvbicpO1xyXG4gIH1cclxuICBcclxuICB2YXIgciA9IG5ldyBGbG9hdDMyQXJyYXkoYS5sZW5ndGgpO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xyXG4gICAgcltpXSA9IGFbaV0gKiBiW2ldO1xyXG4gIH1cclxuICByZXR1cm4gcjtcclxufVxyXG5cclxucmdtLnZzbXVsdCA9IGZ1bmN0aW9uICh2LCBzKSB7XHJcbiAgdmFyIHIgPSBuZXcgRmxvYXQzMkFycmF5KHYubGVuZ3RoKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHYubGVuZ3RoOyBpKyspIHtcclxuICAgIHJbaV0gPSB2W2ldICogcztcclxuICB9XHJcbiAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbnJnbS5sZW5ndGggPSBmdW5jdGlvbiAodikgeyAgXHJcbiAgcmV0dXJuIE1hdGguc3FydChyZ20uZG90KHYsIHYpKTtcclxufVxyXG5cclxucmdtLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgcmV0dXJuIHJnbS52c211bHQodiwgMS4wIC8gcmdtLmxlbmd0aCh2KSk7XHJcbn1cclxuXHJcbnJnbS5tbXVsdCA9IGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgaWYgKGEubGVuZ3RoICE9IGIubGVuZ3RoKSB7XHJcbiAgICB0aHJvdyBFcnJvcignbW11bHQ6IGEgYW5kIGIgbXVzdCBiZSB0aGUgc2FtZSBkaW1lbnNpb24nKTtcclxuICB9XHJcbiAgXHJcbiAgdmFyIG4gPSBNYXRoLnNxcnQoYS5sZW5ndGgpO1xyXG4gIHZhciByID0gbmV3IEZsb2F0MzJBcnJheShhLmxlbmd0aCk7XHJcbiAgXHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcclxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbjsgaisrKSB7XHJcbiAgICAgIHZhciB2ID0gMDtcclxuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBuOyBrKyspIHtcclxuICAgICAgICB2ID0gdiArIGFbaSpuK2tdICogYltrKm4ral07XHJcbiAgICAgIH1cclxuICAgICAgcltpKm4ral0gPSB2O1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICByZXR1cm4gcjtcclxufVxyXG5cclxucmdtLnRyYW5zcG9zZSA9IGZ1bmN0aW9uKG0pIHsgICAgXHJcbiAgdmFyIG4gPSBNYXRoLnNxcnQobS5sZW5ndGgpO1xyXG4gIHZhciByID0gbmV3IEZsb2F0MzJBcnJheShtLmxlbmd0aCk7XHJcbiAgXHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcclxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbjsgaisrKSB7XHJcbiAgICAgIHJbaipuK2ldID0gbVtpKm4ral07XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiByO1xyXG59XHJcblxyXG5yZ20ubXZtdWx0ID0gZnVuY3Rpb24gKG0sIHYpIHtcclxuXHR2YXIgbiA9IHYubGVuZ3RoO1xyXG5cdHZhciByID0gbmV3IEZsb2F0MzJBcnJheShuKTtcclxuXHRcclxuXHRmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKylcclxuXHR7XHJcblx0XHRyW2ldID0gMDtcclxuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgbjsgaisrKVxyXG5cdFx0e1xyXG5cdFx0XHRcdHJbaV0gKz0gbVtqKm4raV0gKiB2W2pdO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRyZXR1cm4gcjtcclxufVxyXG5cclxucmdtLnFtdWx0ID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICB2YXIgd2EgPSBhWzNdO1xyXG4gIHZhciB2YSA9IHJnbS52ZWMzKGFbMF0sIGFbMV0sIGFbMl0pO1xyXG4gIHZhciB3YiA9IGJbM107XHJcbiAgdmFyIHZiID0gcmdtLnZlYzMoYlswXSwgYlsxXSwgYlsyXSk7XHJcbiAgXHJcbiAgdmFyIHcgPSB3YSAqIHdiIC0gcmdtLmRvdCh2YSwgdmIpO1xyXG4gIHZhciB2ID0gcmdtLmFkZChyZ20uYWRkKHJnbS52c211bHQodmIsIHdhKSwgcmdtLnZzbXVsdCh2YSwgd2IpKSwgcmdtLmNyb3NzKHZhLCB2YikpO1xyXG5cclxuICByZXR1cm4gcmdtLnF1YXQodlswXSwgdlsxXSwgdmFbMl0sIHcpO1xyXG59XHJcblxyXG5yZ20ucWNvbmp1Z2F0ZSA9IGZ1bmN0aW9uIChxKSB7XHJcbiAgcmV0dXJuIHJnbS5xdWF0KC1xWzBdLCAtcVsxXSwgLXFbMl0sIHFbM10pO1xyXG59XHJcblxyXG5yZ20ucXVhdDJtYXQ0ID0gZnVuY3Rpb24gKHEpIHtcclxuICB2YXIgeHggPSBxWzBdICogcVswXTtcclxuICB2YXIgeHkgPSBxWzBdICogcVsxXTtcclxuICB2YXIgeHogPSBxWzBdICogcVsyXTtcclxuICB2YXIgeHcgPSBxWzBdICogcVszXTtcclxuICB2YXIgeXkgPSBxWzFdICogcVsxXTtcclxuICB2YXIgeXogPSBxWzFdICogcVsyXTtcclxuICB2YXIgeXcgPSBxWzFdICogcVszXTtcclxuICB2YXIgenogPSBxWzJdICogcVsyXTtcclxuICB2YXIgencgPSBxWzJdICogcVszXTtcclxuICBcclxuICB2YXIgbWF0ID0gcmdtLm1hdDQoMSk7XHJcbiAgbWF0WzBdICA9IDEgLSAyICogKHl5ICsgenopO1xyXG4gIG1hdFs0XSAgPSAgICAgMiAqICh4eSAtIHp3KTtcclxuICBtYXRbOF0gID0gICAgIDIgKiAoeHogKyB5dyk7XHJcbiAgbWF0WzFdICA9ICAgICAyICogKHh5ICsgencpO1xyXG4gIG1hdFs1XSAgPSAxIC0gMiAqICh4eCArIHp6KTtcclxuICBtYXRbOV0gID0gICAgIDIgKiAoeXogLSB4dyk7XHJcbiAgbWF0WzJdICA9ICAgICAyICogKHh6IC0geXcpO1xyXG4gIG1hdFs2XSAgPSAgICAgMiAqICh5eiArIHh3KTtcclxuICBtYXRbMTBdID0gMSAtIDIgKiAoeHggKyB5eSk7XHJcbiAgbWF0WzNdICA9IG1hdFs3XSA9IG1hdFsxMV0gPSBtYXRbMTJdID0gbWF0WzEzXSA9IG1hdFsxNF0gPSAwO1xyXG4gIG1hdFsxNV0gPSAxO1xyXG4gIFxyXG4gIHJldHVybiBtYXQ7XHJcbn1cclxuXHJcbnJnbS5lcXVhbCA9IGZ1bmN0aW9uIChhLCBiLCBlcHMpIHtcclxuICBpZiAoYS5sZW5ndGggIT0gYi5sZW5ndGgpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgXHJcbiAgdmFyIGUgPSAoZXBzICE9PSB1bmRlZmluZWQpID8gZXBzIDogMWUtNjtcclxuICBcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcclxuICAgIGlmIChNYXRoLmFicyhhW2ldIC0gYltpXSkgPiBlKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIHRydWU7XHJcbn0iLCJcclxuXHJcbnJnbS5yYWRpYW5zID0gZnVuY3Rpb24oZGVncmVlcykge1xyXG4gIHJldHVybiBkZWdyZWVzICogKE1hdGguUEkgLyAxODAuMCk7XHJcbn07XHJcblxyXG5yZ20uZGVncmVlcyA9IGZ1bmN0aW9uKHJhZGlhbnMpIHtcclxuICByZXR1cm4gcmFkaWFucyAqICgxODAuMCAvIE1hdGguUEkpO1xyXG59OyBcclxuXHJcblxyXG5yZ20ub3J0aG8gPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIpIHtcclxuICB2YXIgcmwgPSAocmlnaHQgLSBsZWZ0KTtcclxuICB2YXIgdGIgPSAodG9wIC0gYm90dG9tKTtcclxuICB2YXIgZm4gPSAoZmFyIC0gbmVhcik7XHJcbiAgXHJcbiAgdmFyIG0gPSByZ20ubWF0NCgpOyAgXHJcbiAgXHJcbiAgbVswXSA9IDIgLyBybDtcclxuICBtWzFdID0gMDtcclxuICBtWzJdID0gMDtcclxuICBtWzNdID0gMDtcclxuICBtWzRdID0gMDtcclxuICBtWzVdID0gMiAvIHRiO1xyXG4gIG1bNl0gPSAwO1xyXG4gIG1bN10gPSAwO1xyXG4gIG1bOF0gPSAwO1xyXG4gIG1bOV0gPSAwO1xyXG4gIG1bMTBdID0gLTIgLyBmbjtcclxuICBtWzExXSA9IDA7XHJcbiAgbVsxMl0gPSAtKGxlZnQgKyByaWdodCkgLyBybDtcclxuICBtWzEzXSA9IC0odG9wICsgYm90dG9tKSAvIHRiO1xyXG4gIG1bMTRdID0gLShmYXIgKyBuZWFyKSAvIGZuO1xyXG4gIG1bMTVdID0gMTtcclxuXHJcbiAgcmV0dXJuIG07XHJcbn1cclxuXHJcbnJnbS5mcnVzdHVtID0gZnVuY3Rpb24gKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgem5lYXIsIHpmYXIpIHtcclxuICB2YXIgdDEgPSAyICogem5lYXI7XHJcbiAgdmFyIHQyID0gcmlnaHQgLSBsZWZ0O1xyXG4gIHZhciB0MyA9IHRvcCAtIGJvdHRvbTtcclxuICB2YXIgdDQgPSB6ZmFyIC0gem5lYXI7XHJcblxyXG4gIHZhciBtID0gbmV3IEZsb2F0MzJBcnJheSgxNik7XHJcbiAgXHJcbiAgbVswXSA9IHQxL3QyOyBtWzRdID0gICAgIDA7IG1bIDhdID0gIChyaWdodCArIGxlZnQpIC8gdDI7IG1bMTJdID0gICAgICAgICAgICAgICAgIDA7XHJcbiAgbVsxXSA9ICAgICAwOyBtWzVdID0gdDEvdDM7IG1bIDldID0gICh0b3AgKyBib3R0b20pIC8gdDM7IG1bMTNdID0gICAgICAgICAgICAgICAgIDA7XHJcbiAgbVsyXSA9ICAgICAwOyBtWzZdID0gICAgIDA7IG1bMTBdID0gKC16ZmFyIC0gem5lYXIpIC8gdDQ7IG1bMTRdID0gKC10MSAqIHpmYXIpIC8gdDQ7XHJcbiAgbVszXSA9ICAgICAwOyBtWzddID0gICAgIDA7IG1bMTFdID0gICAgICAgICAgICAgICAgICAgLTE7IG1bMTVdID0gICAgICAgICAgICAgICAgIDA7XHJcbiAgXHJcbiAgcmV0dXJuIG07XHJcbn1cclxuXHJcbnJnbS5wZXJzcGVjdGl2ZSA9IGZ1bmN0aW9uIChmb3Z5LCBhc3BlY3QsIHpuZWFyLCB6ZmFyKSB7XHJcbiAgdmFyIHltYXggPSB6bmVhciAqIE1hdGgudGFuKHJnbS5yYWRpYW5zKGZvdnkpKTtcclxuICB2YXIgeG1heCA9IHltYXggKiBhc3BlY3Q7XHJcbiAgcmV0dXJuIHJnbS5mcnVzdHVtKC14bWF4LCB4bWF4LCAteW1heCwgeW1heCwgem5lYXIsIHpmYXIpO1xyXG59XHJcblxyXG4vLyBOT1RFOiB0aGlzIGlzIGluZWZmaWNpZW50LCBpdCBtYXkgYmUgc2Vuc2libGUgdG8gcHJvdmlkZSBpbnBsYWNlIHZlcnNpb25zXHJcbnJnbS50cmFuc2xhdGUgPSBmdW5jdGlvbihtLCB4LCB5LCB6KSB7ICAgIFxyXG4gIHZhciByID0gcmdtLm1hdDQobSk7XHJcbiAgclsxMl0gPSBtWzBdICogeCArIG1bNF0gKiB5ICsgbVsgOF0gKiB6ICsgbVsxMl07XHJcbiAgclsxM10gPSBtWzFdICogeCArIG1bNV0gKiB5ICsgbVsgOV0gKiB6ICsgbVsxM107XHJcbiAgclsxNF0gPSBtWzJdICogeCArIG1bNl0gKiB5ICsgbVsxMF0gKiB6ICsgbVsxNF07XHJcbiAgclsxNV0gPSBtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV07XHJcbiAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbnJnbS5yb3RhdGUgPSBmdW5jdGlvbiAobSwgYW5nbGUsIHgsIHksIHopIHsgIFxyXG4gIHZhciBhID0gcmdtLnJhZGlhbnMoYW5nbGUpO1xyXG4gIHZhciBjID0gTWF0aC5jb3MoYSk7XHJcbiAgdmFyIHMgPSBNYXRoLnNpbihhKTtcclxuICBcclxuICB2YXIgbCA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopO1xyXG4gIHZhciBueCA9IHggLyBsO1xyXG4gIHZhciBueSA9IHkgLyBsO1xyXG4gIHZhciBueiA9IHogLyBsO1xyXG5cclxuICB2YXIgdDAgPSBueCAqICgxIC0gYyk7XHJcbiAgdmFyIHQxID0gbnkgKiAoMSAtIGMpO1xyXG4gIHZhciB0MiA9IG56ICogKDEgLSBjKTsgIFxyXG5cclxuICB2YXIgZCA9IHJnbS5tYXQ0KDEpO1xyXG4gIFxyXG4gIGRbIDBdID0gYyArIHQwICogbng7XHJcbiAgZFsgMV0gPSAwICsgdDAgKiBueSArIHMgKiBuejtcclxuICBkWyAyXSA9IDAgKyB0MCAqIG56IC0gcyAqIG55O1xyXG5cclxuICBkWyA0XSA9IDAgKyB0MSAqIG54IC0gcyAqIG56O1xyXG4gIGRbIDVdID0gYyArIHQxICogbnk7XHJcbiAgZFsgNl0gPSAwICsgdDEgKiBueiArIHMgKiBueDtcclxuXHJcbiAgZFsgOF0gPSAwICsgdDIgKiBueCArIHMgKiBueTtcclxuICBkWyA5XSA9IDAgKyB0MiAqIG55IC0gcyAqIG54O1xyXG4gIGRbMTBdID0gYyArIHQyICogbno7ICBcclxuICBcclxuICB2YXIgciA9IHJnbS5tbXVsdChtLCBkKTtcclxuICBcclxuICByWzEyXSA9IG1bMTJdO1xyXG4gIHJbMTNdID0gbVsxM107XHJcbiAgclsxNF0gPSBtWzE0XTtcclxuICByWzE1XSA9IG1bMTVdO1xyXG4gIFxyXG4gIHJldHVybiByO1xyXG59XHJcblxyXG5yZ20uc2NhbGUgPSBmdW5jdGlvbihtLCB4LCB5LCB6KSB7ICAgIFxyXG4gIHZhciByID0gcmdtLm1hdDQoMSk7XHJcbiAgXHJcbiAgclsgMF0gPSBtWyAwXSAqIHg7IFxyXG4gIHJbIDFdID0gbVsgMV0gKiB4OyBcclxuICByWyAyXSA9IG1bIDJdICogeDsgXHJcbiAgclsgM10gPSBtWyAzXSAqIHg7IFxyXG4gIFxyXG4gIHJbIDRdID0gbVsgNF0gKiB5OyBcclxuICByWyA1XSA9IG1bIDVdICogeTsgXHJcbiAgclsgNl0gPSBtWyA2XSAqIHk7IFxyXG4gIHJbIDddID0gbVsgN10gKiB5OyBcclxuICBcclxuICByWyA4XSA9IG1bIDhdICogejtcclxuICByWyA5XSA9IG1bIDldICogejtcclxuICByWzEwXSA9IG1bMTBdICogejtcclxuICByWzExXSA9IG1bMTFdICogejtcclxuICBcclxuICByWzEyXSA9IG1bMTJdO1xyXG4gIHJbMTNdID0gbVsxM107XHJcbiAgclsxNF0gPSBtWzE0XTtcclxuICByWzE1XSA9IG1bMTVdO1xyXG4gIFxyXG4gIHJldHVybiByO1xyXG59XHJcblxyXG5yZ20ucXJvdGF0ZSA9IGZ1bmN0aW9uIChhbmdsZSwgYXhpcykge1xyXG4gIHZhciBhbiAgICA9IHJnbS5ub3JtYWxpemUoYXhpcyk7XHJcbiAgdmFyIHNpbl9hID0gTWF0aC5zaW4ocmdtLnJhZGlhbnMoYW5nbGUvMi4wKSk7XHJcbiAgdmFyIGNvc19hID0gTWF0aC5jb3MocmdtLnJhZGlhbnMoYW5nbGUvMi4wKSk7XHJcbiAgdmFyIHggPSBhblswXSAqIHNpbl9hO1xyXG4gIHZhciB5ID0gYW5bMV0gKiBzaW5fYTtcclxuICB2YXIgeiA9IGFuWzJdICogc2luX2E7XHJcbiAgdmFyIHcgPSBjb3NfYTtcclxuICByZXR1cm4gcmdtLnF1YXQoeCwgeSwgeiwgdyk7XHJcbn1cclxuXHJcbnJnbS5xdHJhbnNmb3JtID0gZnVuY3Rpb24gKHEsIHYpIHtcclxuICB2YXIgcW4gPSByZ20ubm9ybWFsaXplKHEpICBcclxuICB2YXIgcXYgPSByZ20ucXVhdCh2WzBdLCB2WzFdLCB2WzJdLCAwKTtcclxuICB2YXIgcWMgPSByZ20ucWNvbmp1Z2F0ZShxbik7XHJcbiAgXHJcbiAgdmFyIHFyID0gcmdtLnFtdWx0KHJnbS5xbXVsdChxbiwgcXYpLCBxYyk7XHJcbiAgXHJcbiAgcmV0dXJuIHJnbS52ZWMzKHFyWzBdLCBxclsxXSwgcXJbMl0pO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
